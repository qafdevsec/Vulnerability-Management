using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Drawing;
using System.Linq;
using System.Text.RegularExpressions;
using BlogPortal.Core.BussinessTemplatesModel.BlogPost;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using ProjectSupport.Core.Models;

namespace ProjectSupport.Core.Models
{
    public class Pentester
        : EntitySingle<
            Tag<Pentester>
            >
    {

        public Pentester()
        {
            ThemColor = getRandomColor();

        }


        
        #region Properties


        //[Range(typeof(bool), "true","true",ErrorMessage = "The field Is Active must be checked.")]
        public bool ThirdParty { get; set; } = false;

        #endregion




        #region Links

        [InverseProperty(nameof(JobTask.Submitter_Pentester))]
        public virtual ICollection<JobTask> DefinedJobTasks { get; set; } = new List<JobTask>();




        [InverseProperty(nameof(Project.Submitter_Pentester))]
        public virtual ICollection<Project> DefinedProjects { get; set; } = new List<Project>();


        [InverseProperty(nameof(Project.Modifier_Pentester))]
        public virtual ICollection<Project> ModifiedProjects { get; set; } = new List<Project>();



        [InverseProperty(nameof(JobTask_Pentester.Pentester))]
        public virtual ICollection<JobTask_Pentester> AssignedJobTasks_as_Pentester { get; set; } = new List<JobTask_Pentester>();



        [ForeignKey(nameof(ApplicationUser))]
        public int? ApplicationUser_Ref { get; set; }
        public virtual ApplicationUser ApplicationUser { get; set; } = new ApplicationUser();



        
        public Color ThemColor { get; set; } = getRandomColor();


        #endregion


        // ---------------------------------------------------------------------------------------
        // events --------------------------------------------------------------------------------


        /// <summary>
        /// remember to call base trigerations befor
        /// make this method non-static (protected virtual void) if you need to inherid it and override this method. else, make this method static, and hide it in inherited class (by keyword new) then call if by "base.Foo()" or "(this a A_class).foo"
        /// </summary>
        protected static void OnEntityCreating(EntityTypeBuilder<Pentester> entityBuilder)
        {
            entityBuilder.Property(r =>  r.ThemColor).HasConversion(c => c.Name, s => Color.FromName(s));

        }

        private static Color getRandomColor()
        {
            Random rnd = new Random(Guid.NewGuid().GetHashCode());
            Color randomColor = Color.FromArgb(rnd.Next(0, 255), rnd.Next(0, 255), rnd.Next(0, 255));
            return randomColor;
        }



    }






}
