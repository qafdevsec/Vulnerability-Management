using BlogPortal.Core.BussinessTemplatesModel.BlogPost;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Pentest_Report_Manager.Classes;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text.RegularExpressions;

namespace ProjectSupport.Core.Models
{
    public class Project
        : EntitySingle<
            Attachment<Project>,
            Tag<Project>,
            Comment<Project, ApplicationUser>,
            ApplicationUser
            > , IValidatableObject
    {


        #region Properties


        public override string ViewFilePath_as_Summary { get; set; } = "~/Views/Projects/Summary.cshtml";
        public override string ViewFilePath_as_ListItem { get; set; } = "~/Views/Projects/SummaryAsListItem.cshtml";


        [Taggable]
        [StringLength(500, ErrorMessage = "طول فیلد نام پروژه نمی‌تواند بیشتر از 500 کاراکتر باشد.")]
        //[Required(ErrorMessage = " فیلد نام پروژه نمی‌تواند خالی باشد.")]
        //[Display(Name = "نام پروژه")]
        [Display(Name = "Name")]
        public string ProjectName { get; set; }



        [Taggable]
        [StringLength(1000, ErrorMessage = "طول فیلد آدرس نمی‌تواند بیشتر از 1000 کاراکتر باشد.")]
        //[Display(Name = "آدرس URL")]
        [Display(Name = "Url")]
        public string URL { get; set; }



        
        [StringLength(10000, ErrorMessage = "طول فیلد توضیحات نمی‌تواند بیشتر از 10000 کاراکتر باشد.")]
        [Display(Name = "Description")]
        [Taggable(IsSharpable = true)]
        public string Description { get; set; }



        [NotMapped]
        public string Description_Printable { get { return Description == null ? null : Description.ReplaceLineBreaks(); } }



        [StringLength(1000, ErrorMessage = "طول فیلد نام ADOM نمی‌تواند بیشتر از 1000 کاراکتر باشد.")]
        [Display(Name = "ADOM")]
        [Taggable]
        public string AdomName { get; set; }



        [Taggable]
        [StringLength(500, ErrorMessage = "طول فیلد نام Policy نمی‌تواند بیشتر از 500 کاراکتر باشد.")]
        [Display(Name = "Policy")]
        public string PolicyName { get; set; }




        [Taggable]
        [StringLength(50, ErrorMessage = "طول Virtual IP نمی‌تواند بیشتر از 50 کاراکتر باشد.")]
        [Display(Name = "Virtual IP")]
        public string VirtualIP { get; set; }




        [Taggable]
        [StringLength(500, ErrorMessage = "طول فیلد Server Pool نمی‌تواند بیشتر از 500 کاراکتر باشد.")]
        [Display(Name = "Server Pool")]
        public string ServerPool { get; set; }




        [Range(0, 100)]
        //[Display(Name = "اولویت")]
        public byte Priority { get; set; }




        [Taggable]
        [Display(Name = "Owner")]
        [StringLength(500, ErrorMessage = "طول فیلد Owner نمیتواند بیشتر از 500 کاراکتر باشد.")]
        public string Owner { get; set; }


        #endregion



        #region Links



        [InverseProperty(nameof(JobTask.Project))]
        public virtual ICollection<JobTask> JobTasks { get; set; } = new List<JobTask>();



        [ForeignKey(nameof(Submitter_Pentester))]
        public int? Submitter_Pentester_Ref { get; set; }
        public virtual Pentester Submitter_Pentester { get; set; }



        [ForeignKey(nameof(Modifier_Pentester))]
        public int? Modifier_Pentester_Ref { get; set; }
        public virtual Pentester Modifier_Pentester { get; set; }



        [ForeignKey(nameof(ParrentProject))]
        public virtual int? ParrentProject_Ref { get; set; }
        public virtual Project ParrentProject { get; set; }
        [InverseProperty(nameof(Project.ParrentProject))]
        public virtual ICollection<Project> SubProjects { get; set; }


        #endregion









        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            var errors = new List<ValidationResult>();

            if ( (ProjectName==null && URL == null && PolicyName == null) || (ProjectName?.Trim() == "" && URL?.Trim() == "" && PolicyName?.Trim() == ""))
                errors.Add(new ValidationResult("حداقل یکی از فیلدهای نام پروژه، نام policy و URL پروژه باید مقداردهی گردد."));

            return errors;
        }


        public override void LoadRelatedData(DbContext dbContext, bool FullDetails = false)
        {
            base.LoadRelatedData(dbContext,FullDetails);

            dbContext.Entry(this).Reference(b => b.ParrentProject).Load();
            dbContext.Entry(this).Collection(b => b.JobTasks).Load();
            dbContext.Entry(this).Collection(b => b.Comments).Load();

            if (FullDetails)
            {
                dbContext.Entry(this).Collection(b => b.Attachments).Load();
                dbContext.Entry(this).Reference(b => b.Submitter_Pentester).Load();
                dbContext.Entry(this).Collection(b => b.SubProjects).Load();
                dbContext.Entry(this).Reference(b => b.Modifier_Pentester).Load();
            }
        }

    }







































}
