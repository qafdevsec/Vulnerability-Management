using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text.RegularExpressions;
using BlogPortal.Core.BussinessTemplatesModel.BlogPost;
using Microsoft.AspNetCore.Identity;
using Pentest_Report_Manager.Classes;

namespace ProjectSupport.Core.Models
{

    public class JobTask
            : EntitySingle<
                Attachment<JobTask>,
                Tag<JobTask>,
                Comment<JobTask,ApplicationUser>,
                ApplicationUser
                >
    {


        #region Properties


        public override string ViewFilePath_as_Summary { get; set; } = "~/Views/Tasks/Summary.cshtml";


        [Taggable]
        public string ReportNumber { get; set; }



        [Taggable]
        [StringLength(10000, ErrorMessage = "طول فیلد عنوان نمی‌تواند بیشتر از 10000 کاراکتر باشد.")]
        [Required]
        //[Display(Name = "عنوان")]
        public string Title { get; set; }


        [Taggable(IsSharpable =true)]
        [StringLength(10000, ErrorMessage = "طول فیلد توضیحات نمی‌تواند بیشتر از 10000 کاراکتر باشد.")]
        [Display(Name = "Description")]
        public string Description { get; set; }



        [NotMapped]
        public string Description_Printable { get { return Description == null ? null : Description.ReplaceLineBreaks(); } }




        //[Display(Name = "وضعیت")]
        [EnumDataType(typeof(TaskStatus), ErrorMessage = "لطفا برای فیلد وضعیت، مقدار مناسبی انتخاب کنید")]
        public TaskStatus Status { get; set; } = TaskStatus.Defined;




        [Display(Name = "Deadline Days")]
        //[Display(Name = "مهلت اجرا (روز)")]
        public int DeadlineDays { get; set; }



        [Taggable]
        [StringLength(500, ErrorMessage = "طول فیلد درخواست دهنده نمیتواند بیشتر از 500 کاراکتر باشد.")]
        [Display(Name = "External Requester")]
        //[Display(Name = "درخواست دهنده")]
        public string ExternalRequesterDetails { get; set; }




        [Taggable]
        [StringLength(300, ErrorMessage = "طول فیلد دوره نمیتواند بیشتر از 300 کاراکتر باشد.")]
        //[Display(Name = "دوره")]
        [Display(Name = "Period Name")]
        public string PeriodNameForThirdParties { get; set; }



        public int LastReportVersion { get; set; } 


        [Range(0, 255)]
        [Display(Name = "High Vulnerabilities")]
        //[Display(Name = "سطح بالا")]
        public byte High_Vulnerabilities
        {
            get
            {
                if (TaskResponse_to_getVulnerabilitiesCount == null)
                    return 0;
                else
                    return TaskResponse_to_getVulnerabilitiesCount.High_Vulnerabilities_Count;
            }
        }


        [Range(0, 255)]
        //[Display(Name = "سطح متوسط")]
        [Display(Name = "Medium Vulnerabilities")]
        [NotMapped]
        public byte Medium_Vulnerabilities
        {
            get
            {
                if (TaskResponse_to_getVulnerabilitiesCount == null)
                    return 0;
                else
                    return TaskResponse_to_getVulnerabilitiesCount.Medium_Vulnerabilities_Count;
            }
        }


        [Range(0, 255)]
        //[Display(Name = "سطح پایین")]
        [Display(Name = "Low Vulnerabilities")]
        [NotMapped]
        public byte Low_Vulnerabilities
        {
            get
            {
                if (TaskResponse_to_getVulnerabilitiesCount == null)
                    return 0;
                else
                    return TaskResponse_to_getVulnerabilitiesCount.Low_Vulnerabilities_Count;
            }
        }




        [Taggable]
        [Display(Name = "Pentest Type")]
        //[Display(Name = "نوع Pentest")]
        [EnumDataType(typeof(PentestType), ErrorMessage = "لطفا برای فیلد نوع Pentest، مقدار مناسبی انتخاب کنید")]
        public PentestType PentestType { get; set; } = ProjectSupport.Core.Models.PentestType.Unspecified;



        [InverseProperty(nameof(SentLetter.JobTask))]
        public virtual ICollection<SentLetter> SentLetters { get; set; } = new List<SentLetter>();




        #endregion



        #region Links

        [ForeignKey(nameof(TaskResponse_to_getVulnerabilitiesCount))]
        public int? TaskResponse_to_getVulnerabilitiesCount_Ref { get; set; }
        public virtual TaskResponse TaskResponse_to_getVulnerabilitiesCount { get; set; }



        [ForeignKey(nameof(Submitter_Pentester))]
        public int? Submitter_Pentester_Ref { get; set; }
        public virtual Pentester Submitter_Pentester { get; set; }





        [ForeignKey(nameof(Project))]
        public int Project_Ref { get; set; }
        public virtual Project Project { get; set; }



        [InverseProperty(nameof(JobTask_Pentester.JobTask))]
        public virtual ICollection<JobTask_Pentester> Pentesters { get; set; } = new List<JobTask_Pentester>();




        [InverseProperty(nameof(ProjectSupport.Core.Models.TaskResponse.JobTask))]
        public virtual ICollection<TaskResponse> TaskResponses { get; set; } = new List<TaskResponse>();


        #endregion




        public override void LoadRelatedData(DbContext dbContext, bool FullDetails = false)
        {
            base.LoadRelatedData(dbContext, FullDetails);

            dbContext.Entry(this).Reference(b => b.Project).Load();
            dbContext.Entry(this).Collection(b => b.Comments).Load();
            dbContext.Entry(this).Collection(b => b.TaskResponses).Load();
            dbContext.Entry(this).Collection(b => b.Pentesters).Load();
            dbContext.Entry(this).Collection(b => b.Pentesters)
                .Query().Include(p => p.Pentester).ThenInclude(p => p.ApplicationUser).Load();
            dbContext.Entry(this).Reference(b => b.TaskResponse_to_getVulnerabilitiesCount).Load();

            if (FullDetails)
            {
                dbContext.Entry(this).Reference(b => b.Submitter_Pentester).Load();
                dbContext.Entry(this).Collection(b => b.Attachments).Load();
            }
        }










    }






    public enum PentestType { Unspecified = 1, White = 2, Gray = 3, Black = 4 }
    public enum TaskStatus { Defined, Assigned, InProgress, Halt, ReportSent, problem, Closed }
    

}