using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text.RegularExpressions;
using BlogPortal.Core.BussinessTemplatesModel.BlogPost;
using Microsoft.AspNetCore.Identity;
using Pentest_Report_Manager.Classes;

namespace ProjectSupport.Core.Models
{

    
    public class TaskResponse
            : EntitySingle<
                Attachment<TaskResponse>,
                Tag<TaskResponse>,
                Comment<TaskResponse, ApplicationUser>, 
                ApplicationUser
                >
    {



        #region Properties





        [Taggable]
        [StringLength(1000, ErrorMessage = "طول فیلد عنوان نمی‌تواند بیشتر از 1000 کاراکتر باشد.")]
        //[Display(Name = "عنوان")]
        [Required(ErrorMessage = "ورود فیلد Title ضروریست")]
        public string Title { get; set; }


        
        [Taggable(IsSharpable = true)]
        [StringLength(10000, ErrorMessage = "طول فیلد توضیحات نمی‌تواند بیشتر از 10000 کاراکتر باشد.")]
        //[Display(Name = "توضیحات")]
        public string Description { get; set; }


        [NotMapped]
        public string Description_Printable { get { return Description == null ? null : Description.ReplaceLineBreaks(); } }




        [Range(0, 255)]
        [Display(Name = "High Vulnerabilities")]
        //[Display(Name = "سطح بالا")]
        public byte High_Vulnerabilities_Count { get; set; }
        [Range(0, 255)]
        [Display(Name = "Medium Vulnerabilities")]
        //[Display(Name = "سطح متوسط")]
        public byte Medium_Vulnerabilities_Count { get; set; }
        [Range(0, 255)]
        //[Display(Name = "سطح پایین")]
        [Display(Name = "Low Vulnerabilities")]
        public byte Low_Vulnerabilities_Count { get; set; }

        public int ReportVersion { get; set; }



        public override string ViewFilePath_as_Detail { get; set; } = "~/Views/Responses/Details.cshtml";


        public bool IsDone { get; set; }
        #endregion





        #region Links




        [InverseProperty(nameof(Models.JobTask.TaskResponse_to_getVulnerabilitiesCount))]
        public virtual JobTask JobTask_to_getVulnerabilitiesCount { get; set; } 




        [ForeignKey(nameof(Submitter_ApplicationUser))]
        public int? Submitter_ApplicationUser_Ref { get; set; }
        public virtual ApplicationUser Submitter_ApplicationUser { get; set; } 




        [Taggable(IsSharpable = true)]
        [InverseProperty(nameof(MyString<TaskResponse>.ParrentObject))]
        public virtual ICollection<MyString<TaskResponse>> Vulnerablities_Titles { get; set; }
            = new List<MyString<TaskResponse>>();





        [Taggable()]
        [InverseProperty(nameof(Models.ReportFileAndPDF.TaskResponse))]
        public virtual ReportFileAndPDF ReportFileAndPDF { get; set; } = new ReportFileAndPDF();


        // public int Document_Version { get; set; }




        [ForeignKey(nameof(JobTask))]
        public int? JobTask_Ref { get; set; }
        public virtual JobTask JobTask { get; set; }





        //[ForeignKey(nameof(ParrentTaskResponse))]
        //public virtual int? ParrentTaskResponse_Ref { get; set; }
        //public virtual TaskResponse ParrentTaskResponse { get; set; }
        //[InverseProperty(nameof(TaskResponse.ParrentTaskResponse))]
        //public virtual ICollection<TaskResponse> SubTaskResponses { get; set; } = new List<TaskResponse>();



        #endregion


    }








}