//using System;
//using System.Collections.Generic;
//using System.ComponentModel.DataAnnotations;
//using System.ComponentModel.DataAnnotations.Schema;
//using System.Text;

//namespace BlogPortal.Core.BussinessTemplatesModel.BlogPost
//{


//    public class EntityDetail<
//        EntitySummaryObjectType,
//        AttachmentType,
//        CommentType,
//        TagType,
//        SubmitterUserEntity
//        >
//        : EntityDetail<EntitySummaryObjectType,AttachmentType,TagType>
//        where TagType : new()
//    {




//        [Taggable(IsSharpable = true)]
//        [InverseProperty(nameof(Comment<
//            EntityDetail<EntitySummaryObjectType, AttachmentType, CommentType, TagType, SubmitterUserEntity>,
//            SubmitterUserEntity
//            >.ParrentObject))]
//        public virtual ICollection<CommentType> Comments { get; set; } = new List<CommentType>();




//    }




//    public class EntityDetail<
//        EntitySummaryObjectType,
//        AttachmentType,
//        TagType
//        >
//        : EntityDetail<EntitySummaryObjectType, TagType>
//        where TagType : new()
//    {



//        [Taggable]
//        [InverseProperty(nameof(Attachment<
//            EntityDetail<
//                EntitySummaryObjectType,
//                AttachmentType,
//                TagType>
//            >.ParrentObject))]
//        public virtual ICollection<AttachmentType> Attachments { get; set; } = new List<AttachmentType>();



//    }




//    public class EntityDetail<
//        EntitySummaryObjectType,
//        TagType> : EntityDetail<EntitySummaryObjectType>
//        where TagType : new()
//    {






//        [InverseProperty(nameof(Tag<
//            EntityDetail<EntitySummaryObjectType, TagType>
//            >.ParrentObject))]
//        public virtual ICollection<TagType> Tags { get; set; } = new List<TagType>();




//        /// <summary>
//        /// rememper to load releted entity "Tags", bewfor calling this function
//        /// </summary>
//        public void RefereshTagList()
//        {
//            if (Tags == null) Tags = new List<TagType>();
//            Tags.Clear();

//            var taggableProps = TaggableAttribute.Get_Taggable_Properties(this);
//            foreach (var prop_attr in taggableProps)
//            {
//                if (prop_attr.TaggableAttribute.IsSharpable == false)
//                {
//                    var newTag = (TagType)Activator.CreateInstance(typeof(TagType), prop_attr.PropertyStringValue);
//                    Tags.Add(newTag);
//                }
//                else
//                {
//                    var sharpedStrings = TaggableAttribute.ExtractSharpStrings(prop_attr.PropertyStringValue);
//                    foreach (var item in sharpedStrings)
//                    {
//                        var newTag = (TagType)Activator.CreateInstance(typeof(TagType), item);
//                        Tags.Add(newTag);
//                    }
//                }
//            }

//        }





//    }





//    public class EntityDetail<EntitySummaryObjectType> 
//    {


//        [Key]
//        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
//        public virtual int ID { get; set; }




//        [StringLength(2000)]
//        public string ViewFilePath { get; set; }



//        [DataType("datetime2")]
//        [Display(Name = "Created")]
//        //[Display(Name = "تاریخ ایجاد")]
//        public DateTime? CreationDateTime { get; set; } = DateTime.Now;



//        [DataType("datetime2")]
//        [Display(Name = "Modified")]
//        //[Display(Name = "تاریخ تغییر")]
//        public DateTime? Last_Modification_DateTime { get; set; } = DateTime.Now;





//        [ForeignKey(nameof(SummaryObject))]
//        public int? EntitySummary_Ref { get; set; }
//        public virtual EntitySummaryObjectType SummaryObject { get; set; }




//        [InverseProperty(nameof(EntitySummary<
//            EntityDetail<EntitySummaryObjectType>
//            >.ParrentEntityDetail))]
//        public virtual ICollection<EntitySummaryObjectType> SubSummaries { get; set; }
//            = new List<EntitySummaryObjectType>();










//    }




//}
