using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Globalization;
using System.Text;

namespace BlogPortal.Core.BussinessTemplatesModel.BlogPost
{
    

    public class EntitySingle<
        AttachmentType,
        TagType,
        CommentType, SubmitterUserEntity
        >
        : EntitySingle<
            AttachmentType,
            TagType
            >
        where TagType : new()
    {



        [Taggable(IsSharpable = true)]
        [InverseProperty(nameof(Comment<
            EntitySingle<AttachmentType, TagType, CommentType, SubmitterUserEntity>,
            SubmitterUserEntity
            >.ParrentObject))]
        public virtual ICollection<CommentType> Comments { get; set; } = new List<CommentType>();

    }





    public class EntitySingle<
        AttachmentType,
        TagType
        >: EntitySingle<TagType>
        where TagType : new()
    {


        [Taggable]
        [InverseProperty(nameof(Attachment<EntitySingle<AttachmentType, TagType>>.ParrentObject))]
        public virtual ICollection<AttachmentType> Attachments { get; set; } = new List<AttachmentType>();



    }






    public class EntitySingle<
        TagType
        > :EntitySingle where TagType : new()
    {



        [InverseProperty(nameof(Tag<EntitySingle<TagType>>.ParrentObject))]
        public virtual ICollection<TagType> Tags { get; set; } = new List<TagType>();




        /// <summary>
        /// rememper to load releted entity "Tags", bewfor calling this function
        /// </summary>
        public void RefereshTagList(DbContext db)  // this does not applyed on lists sub entities
        {
            if (Tags == null) Tags = new List<TagType>();
            foreach (var tag in Tags)
                db.Entry(tag).State = EntityState.Deleted;

            var taggableProps = TaggableAttribute.Get_Taggable_Properties(this);
            foreach (var prop_attr in taggableProps)
            {
                if (string.IsNullOrEmpty(prop_attr.PropertyStringValue) ||
                    prop_attr.PropertyStringValue == "null")
                    continue;

                if (prop_attr.TaggableAttribute.IsSharpable == false)
                {
                    var newTag = (TagType)Activator.CreateInstance(typeof(TagType), prop_attr.PropertyStringValue);
                    Tags.Add(newTag);
                }
                else
                {
                    var sharpedStrings = TaggableAttribute.ExtractSharpStrings(prop_attr.PropertyStringValue);
                    foreach (var item in sharpedStrings)
                    {
                        var newTag = (TagType)Activator.CreateInstance(typeof(TagType), item.Substring(1,item.Length-1));
                        Tags.Add(newTag);
                    }
                }
            }

        }




    }






    public class EntitySingle
    {

        #region Properties

        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public virtual int ID { get; set; }



        [StringLength(2000)]
        public virtual string ViewFilePath_as_Summary { get; set; }


        [StringLength(2000)]
        public virtual string ViewFilePath_as_ListItem { get; set; }

        [StringLength(2000)]
        public virtual string ViewFilePath_as_Detail { get; set; }




        [DataType("datetime2")]
        [Display(Name = "Created")]
        //[Display(Name = "تاریخ ایجاد")]
        public DateTime? CreationDateTime { get; set; } = DateTime.Now;

        public string CreationDateTime_in_PersianDate
        {
            get
            {
                return convertToPersianString(CreationDateTime);
            }
        }

        private string convertToPersianString(DateTime? date) {
            if (date == null)
                return "";
            DateTime d = date ?? DateTime.Now;
            return string.Format("{0}/{1}/{2}", (d.Year % 100).ToString("00"),
                d.Month.ToString("00"),
                d.Day.ToString("00"));
        }


        [DataType("datetime2")]
        [Display(Name = "Modified")]
        //[Display(Name = "تاریخ تغییر")]
        public DateTime? Last_Modification_DateTime { get; set; } = DateTime.Now;


        public string Last_Modification_DateTime_in_PersianDate
        {
            get
            {
                return convertToPersianString(Last_Modification_DateTime);
            }
        }


        public bool IsDeleted { get; set; }



        #endregion




        public virtual void LoadRelatedData(DbContext dbContext, bool FullDetails = false)
        {
        }





    }





}
