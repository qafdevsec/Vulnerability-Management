using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text;

namespace BlogPortal.Core.BussinessTemplatesModel.BlogPost
{




    public class Comment<ParrentEntityType, UserEntityType>
    {

        public Comment()
        {}
        public Comment(string text)
        {
            Text = text;
        }

        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public virtual int ID { get; set; }




        [DataType("datetime2")]
        [Display(Name = "Created")]
        //[Display(Name = "تاریخ ایجاد")]
        public DateTime? CreationDateTime { get; set; } = DateTime.Now;



        [DataType("datetime2")]
        [Display(Name = "Modified")]
        //[Display(Name = "تاریخ تغییر")]
        public DateTime? Last_Modification_DateTime { get; set; } = DateTime.Now;




        [Taggable(IsSharpable = true)]
        [StringLength(5000, ErrorMessage = "طول متن کامنت، نمی‌تواند از 5000 کاراکتر بیشتر باشد.")]
        //[Display(Name = "متن")]
        public string Text { get; set; }




        [Taggable()]
        [StringLength(500, ErrorMessage = "طول متن کامنت، نمی‌تواند از 500 کاراکتر بیشتر باشد.")]
        //[Display(Name = "متن")]
        public string UserName { get; set; }





        public bool IsDeleted { get; set; }


        [StringLength(2000)]
        public string ViewFilePath { get; set; }







        [ForeignKey(nameof(ParrentObject))]
        public int? ParrentEntityObject_Ref { get; set; }
        public virtual ParrentEntityType ParrentObject { get; set; }




        public virtual UserEntityType SubmitterUser { get; set; }





        [InverseProperty(nameof(Comment < ParrentEntityType, UserEntityType >.RepliedComment))]
        public virtual ICollection<Comment<ParrentEntityType, UserEntityType>> Replies { get; set; }
            = new List<Comment<ParrentEntityType, UserEntityType>>();

        [ForeignKey(nameof(RepliedComment))]
        public int? RepliedComment_Ref { get; set; }
        public virtual Comment<ParrentEntityType, UserEntityType> RepliedComment { get; set; }





        //[InverseProperty(nameof(Tag<Comment<ParrentEntityType, UserEntityType>>.ParrentObject))]
        //public virtual ICollection<Tag<Comment<ParrentEntityType, UserEntityType>>> Tags { get; set; }
        //    = new List<Tag<Comment<ParrentEntityType, UserEntityType>>>();






        // methods --------------------------------------------------------------------------------------




        public override string ToString()
        {
            return Text;
        }



        ///// <summary>
        ///// rememper to load releted entity "Tags", bewfor calling this function
        ///// </summary>
        //public void RefereshTagList()
        //{
        //    if (Tags == null) Tags = new List<Tag<Comment<ParrentEntityType, UserEntityType>>>();
        //    Tags.Clear();

        //    var taggableProps = TaggableAttribute.Get_Taggable_Properties(this);
        //    foreach (var prop_attr in taggableProps)
        //    {
        //        if (prop_attr.TaggableAttribute.IsSharpable == false)
        //            Tags.Add(new Tag<Comment<ParrentEntityType, UserEntityType>>() { Text = prop_attr.PropertyStringValue });
        //        else
        //        {
        //            var sharpedStrings = TaggableAttribute.ExtractSharpStrings(prop_attr.PropertyStringValue);
        //            foreach (var item in sharpedStrings)
        //                Tags.Add(new Tag<Comment<ParrentEntityType, UserEntityType>>() { Text = item });
        //        }
        //    }

        //}




    }




    public class CommentUtilities {

        public static List<Comment<object, SourceIdentityUser>>
            GeneralizeCommentsType <SourseParrentType, SourceIdentityUser>
            (ICollection<Comment<SourseParrentType, SourceIdentityUser>> sourceComments)
        {

            List<Comment<object, SourceIdentityUser>> resultComments = 
                new List<Comment<object, SourceIdentityUser>>();


            foreach (var comment in sourceComments)
            {
                var newComment = new Comment<object, SourceIdentityUser>()
                {
                    ID = comment.ID,
                    Text = comment.Text,
                    UserName = comment.UserName,
                    CreationDateTime = comment.CreationDateTime,
                    IsDeleted = comment.IsDeleted,
                    Last_Modification_DateTime = comment.Last_Modification_DateTime,
                    SubmitterUser = comment.SubmitterUser,
                    ViewFilePath = comment.ViewFilePath,
                    ParrentEntityObject_Ref = comment.ParrentEntityObject_Ref,
                    RepliedComment_Ref = comment.RepliedComment_Ref
                };

                if (comment.Replies != null)
                    newComment.Replies = GeneralizeCommentsType<SourseParrentType, SourceIdentityUser>(comment.Replies);

                //comment.RepliedComment // does not converted

                resultComments.Add(newComment);
            }


            return resultComments;

        }



    }




}
