using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;

namespace BlogPortal.Core.BussinessTemplatesModel.BlogPost
{


    public class Tag<ParrentEntityType> : Tag
    {
        public Tag(){}

        public Tag(string text){
            Text = text;
        }


        [ForeignKey(nameof(ParrentObject))]
        public int? ParrentEntityObject_Ref { get; set; }
        public virtual ParrentEntityType ParrentObject { get; set; }

    }






    public class Tag
    {
        public Tag() { }

        public Tag(string text)
        {
            Text = text;
        }





        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public virtual int ID { get; set; }



        [StringLength(maximumLength: 1000, ErrorMessage = "طول tag نباید از 1000 حرف بیشتر باشد")]
        //[Display(Name = "متن")]
        public string Text { get; set; }



    }





    [AttributeUsage(AttributeTargets.Property)]
    public class TaggableAttribute : Attribute
    {

        public bool IsSharpable { get; set; }






        public static List<Property_String_Attribute> Get_Taggable_Properties(object classObject)
        {
            if (classObject == null)
                return new List<Property_String_Attribute>();

            var props = classObject.GetType().GetProperties().Where(p =>
               Attribute.IsDefined(p, typeof(TaggableAttribute)) 
               //p.PropertyType == typeof(string)
               //p.PropertyType.IsSubclassOf(typeof(IEnumerable)) &&
               //(p.GetMethod.IsVirtual || (p.CanRead ? p.GetMethod : p.SetMethod).IsVirtual) &&
               );

            Type IEnumerableType = typeof(IEnumerable);
            List<Property_String_Attribute> result = new List<Property_String_Attribute>();
            foreach (PropertyInfo prp in props)
            {
                if (!prp.CanRead) continue;
                object value = prp.GetValue(classObject, null);
                var attrs = (TaggableAttribute[])prp.GetCustomAttributes(typeof(TaggableAttribute), false);
                //object value = prp.GetValue(classObject, new object[] { });

                if (value == null)
                    continue;
                else if (value.GetType().IsValueType)
                    result.Add(new Property_String_Attribute()
                    {
                        PropertyInfo = prp,
                        PropertyStringValue = value.ToString(),
                        TaggableAttribute = attrs[0]
                    });
                else if (value.GetType() == typeof(string) &&
                    !string.IsNullOrEmpty((string)value) &&
                    !string.IsNullOrWhiteSpace((string)value))
                    result.Add(new Property_String_Attribute()
                    {
                        PropertyInfo = prp,
                        PropertyStringValue = (string)value,
                        TaggableAttribute = attrs[0]
                    });
                else if (value.GetType().IsArray)
                {
                    Array array = (Array)value;
                    foreach (object o in array)
                    {
                        var vvv = o.ToString();
                        if (!string.IsNullOrEmpty(vvv) && !string.IsNullOrWhiteSpace(vvv))
                            result.Add(new Property_String_Attribute()
                            {
                                PropertyInfo = prp,
                                PropertyStringValue = vvv,
                                TaggableAttribute = attrs[0]
                            });
                    }
                }
                else if (prp.PropertyType.IsGenericType)
                {
                    if (typeof(ICollection<>).IsAssignableFrom(prp.PropertyType.GetGenericTypeDefinition()) ||   //IEnumerableType.IsAssignableFrom(prp.PropertyType)
                    prp.PropertyType.GetInterfaces().Any(x => x.IsGenericType && x.GetGenericTypeDefinition() == typeof(ICollection<>)))
                    {
                        IEnumerable listObject = (IEnumerable)prp.GetValue(classObject, null);
                        if (listObject != null)
                            foreach (object o in listObject)
                            {
                                var vvv = o.ToString();
                                if (!string.IsNullOrEmpty(vvv) && !string.IsNullOrWhiteSpace(vvv))
                                    result.Add(new Property_String_Attribute()
                                    {
                                        PropertyInfo = prp,
                                        PropertyStringValue = vvv,
                                        TaggableAttribute = attrs[0]
                                    });
                            }
                    }
                    else
                    {
                        var vvv = value.ToString();
                            if (!string.IsNullOrEmpty(vvv) && !string.IsNullOrWhiteSpace(vvv))
                                result.Add(new Property_String_Attribute()
                                {
                                    PropertyInfo = prp,
                                    PropertyStringValue = vvv,
                                    TaggableAttribute = attrs[0]
                                });
                        }
                }
                else if (prp.PropertyType.IsEnum)
                    result.Add(new Property_String_Attribute()
                    {
                        PropertyInfo = prp,
                        PropertyStringValue = value.ToString(),
                        TaggableAttribute = attrs[0]
                    });
                else if (prp.PropertyType.IsClass) {
                    result.Add(new Property_String_Attribute()
                    {
                        PropertyInfo = prp,
                        PropertyStringValue = value.ToString(),
                        TaggableAttribute = attrs[0]
                    });
                }
                //check for nested classes as properties:   if (prp.PropertyType.Assembly == classObject.GetType().Assembly)

            }

            return result;
        }


        /// <summary>
        /// extracts tag's strings from input string. Ex, "ali #ali #ali#reza reza" --> {"#ali", "#ali#reza"}
        /// </summary>
        public static List<string> ExtractSharpStrings(string input, string identificationChar = "#")
        {
            if (string.IsNullOrEmpty(input) || string.IsNullOrWhiteSpace(input))
                return new List<string>();

            var taggableWords = Regex.Split(input.Trim(), @"\s+")
                .Where(s => s != string.Empty &&
                    (s.Length > 1 && s.Substring(0, 1) == identificationChar &&
                    s.Substring(1, 1) != identificationChar)).ToList();

            return taggableWords;
        }


    }

    public class Property_String_Attribute
    {
        public PropertyInfo PropertyInfo { get; set; }
        public String PropertyStringValue { get; set; }
        public TaggableAttribute TaggableAttribute { get; set; }

    }



}