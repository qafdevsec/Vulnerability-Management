using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace BlogPortal.Core.BussinessTemplatesModel.BlogPost
{

    public class Attachment_with_two_Relations<ParrentEntityType> : Attachment
    {


        public Attachment_with_two_Relations() { }
        public Attachment_with_two_Relations(string fileName) : base(fileName) { }



        #region Links


        [ForeignKey(nameof(ParrentObject_Filed1))]
        public int? ParrentObject_Filed1_Ref { get; set; }
        public virtual ParrentEntityType ParrentObject_Filed1 { get; set; }


        [ForeignKey(nameof(ParrentObject_Filed2))]
        public int? ParrentObject_Filed2_Ref { get; set; }
        public virtual ParrentEntityType ParrentObject_Filed2 { get; set; }


        #endregion

    }



    public class Attachment<ParrentEntityType> : Attachment
    {


        public Attachment(){}
        public Attachment(string fileName): base(fileName){}



        #region Links


        [ForeignKey(nameof(ParrentObject))]
        public int? ParrentObject_Ref { get; set; }
        public virtual ParrentEntityType ParrentObject { get; set; }


        #endregion

    }






    public class Attachment
    {


        public Attachment() { }
        public Attachment(string fileName) { FileVirtualName = fileName; }


        #region Properties





        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public virtual int ID { get; set; }




        //[Required]
        [StringLength(300, ErrorMessage = "طول فیلد نام فایل نمی‌تواند بیشتر از 300 کاراکتر باشد.")]
        [Display(Name = "File Name")]
        public string FileVirtualName { get; set; }


        [StringLength(2000)]
        [Display(Name = "File Physical Name")]
        public string FilePhysicalName { get; set; }


        [StringLength(2000)]
        [Display(Name = "File Physical Path")]
        public string FilePhysicalPath { get; set; }




        [StringLength(2000)]
        [Display(Name = "File Root Full Path")]
        public string FileWebRootFullPath { get; set; }




        [StringLength(100)]
        public string Extention { get; set; }


        [StringLength(100)]
        public string Lable { get; set; }



        #endregion



        public override string ToString()
        {
            return FileVirtualName;
        }


    }












}
