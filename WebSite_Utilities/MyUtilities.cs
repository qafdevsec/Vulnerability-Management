using Ganss.XSS;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Web;

namespace Pentest_Report_Manager.Classes
{
    public static class MyUtilities
    {


        public static Dictionary<string, string> ParseQueryString(string querystring)
        {
            var nvc = HttpUtility.ParseQueryString(querystring);
            return nvc.AllKeys.ToDictionary(k => k, k => nvc[k]);
        }

        public static string CreateQueryString(Dictionary<string, string> parameters)
        {
            return string.Join("&", parameters.Select(kvp =>
               string.Format("{0}={1}", kvp.Key, HttpUtility.UrlEncode(kvp.Value))));
        }





        static string HMacKey { get; set; } = "lkjh#@#SDJDH76";
        public static String GetHMac(String text, String key, int? resultLength)
        {
            var result = GetHMac(text, key);
            if (resultLength == null || resultLength > result.Length)
                return result;
            return result.Substring(0, (int)resultLength);
        }
        public static String GetHMac(String text, int? resultLength)
        {
            return GetHMac(text, HMacKey, resultLength);
        }
        
        public static String GetHMac(String text, String key)
        {
            // change according to your needs, an UTF8Encoding
            // could be more suitable in certain situations
            ASCIIEncoding encoding = new ASCIIEncoding();

            Byte[] textBytes = encoding.GetBytes(text);
            Byte[] keyBytes = encoding.GetBytes(key);

            Byte[] hashBytes;

            using (HMACSHA256 hash = new HMACSHA256(keyBytes))
                hashBytes = hash.ComputeHash(textBytes);

            return BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
        }
        public static String GetHMac(String text)
        {
            return GetHMac(text, HMacKey);
        }







        public static QueryParameters GetQueryParameters()
        {
            //var dictionary = context.Request.Query.ToDictionary(d => d.Key, d => d.Value.ToString());


            return new QueryParameters(new Dictionary<string,string>());
        }




        public static string ReplaceLineBreaks(this string input)
        {



            //System.Text.StringBuilder sb = new System.Text.StringBuilder();
            //System.IO.StringReader sr = new System.IO.StringReader(input);
            //string tmpS = null;
            //do
            //{
            //    tmpS = sr.ReadLine();
            //    if (tmpS != null)
            //    {
            //        sb.Append(tmpS);
            //        sb.Append("<br />");
            //    }
            //} while (tmpS != null);
            //var convertedString = sb.ToString();

            input = input.SanitizeHtml();

            return input.Replace("\n", "<br />").Replace("\r\n", "<br />").Replace(System.Environment.NewLine, "<br />");

        }
        //public static string ReplaceBrTags(this string input)
        //{
        //    return input.Replace("<br />", System.Environment.NewLine);
        //}




        public static string SanitizeHtml(this string input)
        {

            var sanitizer = new HtmlSanitizer();
            var html = @"<script>alert('xss')</script><div onload=""alert('xss')"""
                + @"style=""background-color: test"">Test<img src=""test.gif"""
                + @"style=""background-image: url(javascript:alert('xss')); margin: 10px""></div>";
            var sanitized = sanitizer.Sanitize(input);
            
            return sanitized;

        }




        public static bool IsRightToLeftChar(this char c)
        {
            
            int hasRandALCat = 0;
            if (c >= 0x5BE && c <= 0x10B7F)
            {
                if (c <= 0x85E)
                {
                    if (c == 0x5BE) hasRandALCat = 1;
                    else if (c == 0x5C0) hasRandALCat = 1;
                    else if (c == 0x5C3) hasRandALCat = 1;
                    else if (c == 0x5C6) hasRandALCat = 1;
                    else if (0x5D0 <= c && c <= 0x5EA) hasRandALCat = 1;
                    else if (0x5F0 <= c && c <= 0x5F4) hasRandALCat = 1;
                    else if (c == 0x608) hasRandALCat = 1;
                    else if (c == 0x60B) hasRandALCat = 1;
                    else if (c == 0x60D) hasRandALCat = 1;
                    else if (c == 0x61B) hasRandALCat = 1;
                    else if (0x61E <= c && c <= 0x64A) hasRandALCat = 1;
                    else if (0x66D <= c && c <= 0x66F) hasRandALCat = 1;
                    else if (0x671 <= c && c <= 0x6D5) hasRandALCat = 1;
                    else if (0x6E5 <= c && c <= 0x6E6) hasRandALCat = 1;
                    else if (0x6EE <= c && c <= 0x6EF) hasRandALCat = 1;
                    else if (0x6FA <= c && c <= 0x70D) hasRandALCat = 1;
                    else if (c == 0x710) hasRandALCat = 1;
                    else if (0x712 <= c && c <= 0x72F) hasRandALCat = 1;
                    else if (0x74D <= c && c <= 0x7A5) hasRandALCat = 1;
                    else if (c == 0x7B1) hasRandALCat = 1;
                    else if (0x7C0 <= c && c <= 0x7EA) hasRandALCat = 1;
                    else if (0x7F4 <= c && c <= 0x7F5) hasRandALCat = 1;
                    else if (c == 0x7FA) hasRandALCat = 1;
                    else if (0x800 <= c && c <= 0x815) hasRandALCat = 1;
                    else if (c == 0x81A) hasRandALCat = 1;
                    else if (c == 0x824) hasRandALCat = 1;
                    else if (c == 0x828) hasRandALCat = 1;
                    else if (0x830 <= c && c <= 0x83E) hasRandALCat = 1;
                    else if (0x840 <= c && c <= 0x858) hasRandALCat = 1;
                    else if (c == 0x85E) hasRandALCat = 1;
                }
                else if (c == 0x200F) hasRandALCat = 1;
                else if (c >= 0xFB1D)
                {
                    if (c == 0xFB1D) hasRandALCat = 1;
                    else if (0xFB1F <= c && c <= 0xFB28) hasRandALCat = 1;
                    else if (0xFB2A <= c && c <= 0xFB36) hasRandALCat = 1;
                    else if (0xFB38 <= c && c <= 0xFB3C) hasRandALCat = 1;
                    else if (c == 0xFB3E) hasRandALCat = 1;
                    else if (0xFB40 <= c && c <= 0xFB41) hasRandALCat = 1;
                    else if (0xFB43 <= c && c <= 0xFB44) hasRandALCat = 1;
                    else if (0xFB46 <= c && c <= 0xFBC1) hasRandALCat = 1;
                    else if (0xFBD3 <= c && c <= 0xFD3D) hasRandALCat = 1;
                    else if (0xFD50 <= c && c <= 0xFD8F) hasRandALCat = 1;
                    else if (0xFD92 <= c && c <= 0xFDC7) hasRandALCat = 1;
                    else if (0xFDF0 <= c && c <= 0xFDFC) hasRandALCat = 1;
                    else if (0xFE70 <= c && c <= 0xFE74) hasRandALCat = 1;
                    else if (0xFE76 <= c && c <= 0xFEFC) hasRandALCat = 1;
                    else if (0x10800 <= c && c <= 0x10805) hasRandALCat = 1;
                    else if (c == 0x10808) hasRandALCat = 1;
                    else if (0x1080A <= c && c <= 0x10835) hasRandALCat = 1;
                    else if (0x10837 <= c && c <= 0x10838) hasRandALCat = 1;
                    else if (c == 0x1083C) hasRandALCat = 1;
                    else if (0x1083F <= c && c <= 0x10855) hasRandALCat = 1;
                    else if (0x10857 <= c && c <= 0x1085F) hasRandALCat = 1;
                    else if (0x10900 <= c && c <= 0x1091B) hasRandALCat = 1;
                    else if (0x10920 <= c && c <= 0x10939) hasRandALCat = 1;
                    else if (c == 0x1093F) hasRandALCat = 1;
                    else if (c == 0x10A00) hasRandALCat = 1;
                    else if (0x10A10 <= c && c <= 0x10A13) hasRandALCat = 1;
                    else if (0x10A15 <= c && c <= 0x10A17) hasRandALCat = 1;
                    else if (0x10A19 <= c && c <= 0x10A33) hasRandALCat = 1;
                    else if (0x10A40 <= c && c <= 0x10A47) hasRandALCat = 1;
                    else if (0x10A50 <= c && c <= 0x10A58) hasRandALCat = 1;
                    else if (0x10A60 <= c && c <= 0x10A7F) hasRandALCat = 1;
                    else if (0x10B00 <= c && c <= 0x10B35) hasRandALCat = 1;
                    else if (0x10B40 <= c && c <= 0x10B55) hasRandALCat = 1;
                    else if (0x10B58 <= c && c <= 0x10B72) hasRandALCat = 1;
                    else if (0x10B78 <= c && c <= 0x10B7F) hasRandALCat = 1;
                }
            }

            return (hasRandALCat>0? true: false);

        }

        public static bool IsRightToLeftText(this string str) {

            if (string.IsNullOrEmpty(str) || str.Length<1)
                return false;

            return (str.Trim().Substring(0, 1).ToCharArray()[0]).IsRightToLeftChar();
        }

        public static string GetTextLangDirection(this string str)
        {

            if (string.IsNullOrEmpty(str) || str.Length < 1)
                return "";

            return str.IsRightToLeftText()? "myRtL" : "";
        }




    }




    public class QueryParameters : Dictionary<string, string>
    {
        public QueryParameters() : base() { }
        public QueryParameters(int capacity) : base(capacity) { }
        public QueryParameters(IDictionary<string, string> dictionary) : base(dictionary) { }

        public QueryParameters WithRoute(string routeParam, string routeValue)
        {
            Add(routeParam, routeValue);

            return this;
        }
    }

}
