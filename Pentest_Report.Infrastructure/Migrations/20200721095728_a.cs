using System;
using Microsoft.EntityFrameworkCore.Migrations;

namespace Pentest_Report.Infrastructure.Migrations
{
    public partial class a : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(maxLength: 256, nullable: true),
                    ConcurrencyStamp = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserName = table.Column<string>(maxLength: 256, nullable: true),
                    NormalizedUserName = table.Column<string>(maxLength: 256, nullable: true),
                    Email = table.Column<string>(maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(maxLength: 256, nullable: true),
                    EmailConfirmed = table.Column<bool>(nullable: false),
                    PasswordHash = table.Column<string>(nullable: true),
                    SecurityStamp = table.Column<string>(nullable: true),
                    ConcurrencyStamp = table.Column<string>(nullable: true),
                    PhoneNumber = table.Column<string>(nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(nullable: false),
                    TwoFactorEnabled = table.Column<bool>(nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(nullable: true),
                    LockoutEnabled = table.Column<bool>(nullable: false),
                    AccessFailedCount = table.Column<int>(nullable: false),
                    FullName = table.Column<string>(maxLength: 500, nullable: false),
                    Description = table.Column<string>(maxLength: 10000, nullable: true),
                    PictureUrl = table.Column<string>(maxLength: 10000, nullable: true),
                    IsDeleted = table.Column<bool>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ConfigurationFields",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Key = table.Column<int>(nullable: false),
                    Value = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConfigurationFields", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "ErrorLogs",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CreationDateTime = table.Column<DateTime>(nullable: true),
                    RequestBody = table.Column<string>(nullable: true),
                    ProgrammerMessage = table.Column<string>(nullable: true),
                    VisualStudioErrorMessage = table.Column<string>(nullable: true),
                    SaveOnDb = table.Column<bool>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ErrorLogs", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoleClaims",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RoleId = table.Column<int>(nullable: false),
                    ClaimType = table.Column<string>(nullable: true),
                    ClaimValue = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(nullable: false),
                    ClaimType = table.Column<string>(nullable: true),
                    ClaimValue = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetUserClaims_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(maxLength: 128, nullable: false),
                    ProviderKey = table.Column<string>(maxLength: 128, nullable: false),
                    ProviderDisplayName = table.Column<string>(nullable: true),
                    UserId = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
                    table.ForeignKey(
                        name: "FK_AspNetUserLogins_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<int>(nullable: false),
                    RoleId = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserTokens",
                columns: table => new
                {
                    UserId = table.Column<int>(nullable: false),
                    LoginProvider = table.Column<string>(maxLength: 128, nullable: false),
                    Name = table.Column<string>(maxLength: 128, nullable: false),
                    Value = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Pentesters",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ViewFilePath_as_Summary = table.Column<string>(maxLength: 2000, nullable: true),
                    ViewFilePath_as_ListItem = table.Column<string>(maxLength: 2000, nullable: true),
                    ViewFilePath_as_Detail = table.Column<string>(maxLength: 2000, nullable: true),
                    CreationDateTime = table.Column<DateTime>(nullable: true),
                    CreationDateTime_in_PersianDate = table.Column<string>(nullable: true),
                    Last_Modification_DateTime = table.Column<DateTime>(nullable: true),
                    Last_Modification_DateTime_in_PersianDate = table.Column<string>(nullable: true),
                    IsDeleted = table.Column<bool>(nullable: false),
                    ThirdParty = table.Column<bool>(nullable: false),
                    ApplicationUser_Ref = table.Column<int>(nullable: true),
                    ThemColor = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Pentesters", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Pentesters_AspNetUsers_ApplicationUser_Ref",
                        column: x => x.ApplicationUser_Ref,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Tag_ApplicationUser",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Text = table.Column<string>(maxLength: 1000, nullable: true),
                    ParrentEntityObject_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tag_ApplicationUser", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Tag_ApplicationUser_AspNetUsers_ParrentEntityObject_Ref",
                        column: x => x.ParrentEntityObject_Ref,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Attachment_Pentester",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FileVirtualName = table.Column<string>(maxLength: 300, nullable: true),
                    FilePhysicalName = table.Column<string>(maxLength: 2000, nullable: true),
                    FilePhysicalPath = table.Column<string>(maxLength: 2000, nullable: true),
                    FileWebRootFullPath = table.Column<string>(maxLength: 2000, nullable: true),
                    Extention = table.Column<string>(maxLength: 100, nullable: true),
                    Lable = table.Column<string>(maxLength: 100, nullable: true),
                    ParrentObject_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Attachment_Pentester", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Attachment_Pentester_Pentesters_ParrentObject_Ref",
                        column: x => x.ParrentObject_Ref,
                        principalTable: "Pentesters",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Projects",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ViewFilePath_as_Detail = table.Column<string>(maxLength: 2000, nullable: true),
                    CreationDateTime = table.Column<DateTime>(nullable: true),
                    CreationDateTime_in_PersianDate = table.Column<string>(nullable: true),
                    Last_Modification_DateTime = table.Column<DateTime>(nullable: true),
                    Last_Modification_DateTime_in_PersianDate = table.Column<string>(nullable: true),
                    IsDeleted = table.Column<bool>(nullable: false),
                    ViewFilePath_as_Summary = table.Column<string>(maxLength: 2000, nullable: true),
                    ViewFilePath_as_ListItem = table.Column<string>(maxLength: 2000, nullable: true),
                    ProjectName = table.Column<string>(maxLength: 500, nullable: true),
                    URL = table.Column<string>(maxLength: 1000, nullable: true),
                    Description = table.Column<string>(maxLength: 10000, nullable: true),
                    Description_Printable = table.Column<string>(nullable: true),
                    AdomName = table.Column<string>(maxLength: 1000, nullable: true),
                    PolicyName = table.Column<string>(maxLength: 500, nullable: true),
                    VirtualIP = table.Column<string>(maxLength: 50, nullable: true),
                    ServerPool = table.Column<string>(maxLength: 500, nullable: true),
                    Priority = table.Column<byte>(nullable: false),
                    Owner = table.Column<string>(maxLength: 500, nullable: true),
                    Submitter_Pentester_Ref = table.Column<int>(nullable: true),
                    Modifier_Pentester_Ref = table.Column<int>(nullable: true),
                    ParrentProject_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Projects", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Projects_Pentesters_Modifier_Pentester_Ref",
                        column: x => x.Modifier_Pentester_Ref,
                        principalTable: "Pentesters",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Projects_Projects_ParrentProject_Ref",
                        column: x => x.ParrentProject_Ref,
                        principalTable: "Projects",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Projects_Pentesters_Submitter_Pentester_Ref",
                        column: x => x.Submitter_Pentester_Ref,
                        principalTable: "Pentesters",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Tag_Pentester",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Text = table.Column<string>(maxLength: 1000, nullable: true),
                    ParrentEntityObject_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tag_Pentester", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Tag_Pentester_Pentesters_ParrentEntityObject_Ref",
                        column: x => x.ParrentEntityObject_Ref,
                        principalTable: "Pentesters",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Attachment_Project",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FileVirtualName = table.Column<string>(maxLength: 300, nullable: true),
                    FilePhysicalName = table.Column<string>(maxLength: 2000, nullable: true),
                    FilePhysicalPath = table.Column<string>(maxLength: 2000, nullable: true),
                    FileWebRootFullPath = table.Column<string>(maxLength: 2000, nullable: true),
                    Extention = table.Column<string>(maxLength: 100, nullable: true),
                    Lable = table.Column<string>(maxLength: 100, nullable: true),
                    ParrentObject_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Attachment_Project", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Attachment_Project_Projects_ParrentObject_Ref",
                        column: x => x.ParrentObject_Ref,
                        principalTable: "Projects",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Comment_Project",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CreationDateTime = table.Column<DateTime>(nullable: true),
                    Last_Modification_DateTime = table.Column<DateTime>(nullable: true),
                    Text = table.Column<string>(maxLength: 5000, nullable: true),
                    UserName = table.Column<string>(maxLength: 500, nullable: true),
                    IsDeleted = table.Column<bool>(nullable: false),
                    ViewFilePath = table.Column<string>(maxLength: 2000, nullable: true),
                    ParrentEntityObject_Ref = table.Column<int>(nullable: true),
                    SubmitterUserId = table.Column<int>(nullable: true),
                    RepliedComment_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Comment_Project", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Comment_Project_Projects_ParrentEntityObject_Ref",
                        column: x => x.ParrentEntityObject_Ref,
                        principalTable: "Projects",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Comment_Project_Comment_Project_RepliedComment_Ref",
                        column: x => x.RepliedComment_Ref,
                        principalTable: "Comment_Project",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Comment_Project_AspNetUsers_SubmitterUserId",
                        column: x => x.SubmitterUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Tag_Project",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Text = table.Column<string>(maxLength: 1000, nullable: true),
                    ParrentEntityObject_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tag_Project", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Tag_Project_Projects_ParrentEntityObject_Ref",
                        column: x => x.ParrentEntityObject_Ref,
                        principalTable: "Projects",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Comment_JobTask",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CreationDateTime = table.Column<DateTime>(nullable: true),
                    Last_Modification_DateTime = table.Column<DateTime>(nullable: true),
                    Text = table.Column<string>(maxLength: 5000, nullable: true),
                    UserName = table.Column<string>(maxLength: 500, nullable: true),
                    IsDeleted = table.Column<bool>(nullable: false),
                    ViewFilePath = table.Column<string>(maxLength: 2000, nullable: true),
                    ParrentEntityObject_Ref = table.Column<int>(nullable: true),
                    SubmitterUserId = table.Column<int>(nullable: true),
                    RepliedComment_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Comment_JobTask", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Comment_JobTask_Comment_JobTask_RepliedComment_Ref",
                        column: x => x.RepliedComment_Ref,
                        principalTable: "Comment_JobTask",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Comment_JobTask_AspNetUsers_SubmitterUserId",
                        column: x => x.SubmitterUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Comment_TaskResponse",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CreationDateTime = table.Column<DateTime>(nullable: true),
                    Last_Modification_DateTime = table.Column<DateTime>(nullable: true),
                    Text = table.Column<string>(maxLength: 5000, nullable: true),
                    UserName = table.Column<string>(maxLength: 500, nullable: true),
                    IsDeleted = table.Column<bool>(nullable: false),
                    ViewFilePath = table.Column<string>(maxLength: 2000, nullable: true),
                    ParrentEntityObject_Ref = table.Column<int>(nullable: true),
                    SubmitterUserId = table.Column<int>(nullable: true),
                    RepliedComment_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Comment_TaskResponse", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Comment_TaskResponse_Comment_TaskResponse_RepliedComment_Ref",
                        column: x => x.RepliedComment_Ref,
                        principalTable: "Comment_TaskResponse",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Comment_TaskResponse_AspNetUsers_SubmitterUserId",
                        column: x => x.SubmitterUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TaskResponses",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ViewFilePath_as_Summary = table.Column<string>(maxLength: 2000, nullable: true),
                    ViewFilePath_as_ListItem = table.Column<string>(maxLength: 2000, nullable: true),
                    CreationDateTime = table.Column<DateTime>(nullable: true),
                    CreationDateTime_in_PersianDate = table.Column<string>(nullable: true),
                    Last_Modification_DateTime = table.Column<DateTime>(nullable: true),
                    Last_Modification_DateTime_in_PersianDate = table.Column<string>(nullable: true),
                    IsDeleted = table.Column<bool>(nullable: false),
                    Title = table.Column<string>(maxLength: 1000, nullable: false),
                    Description = table.Column<string>(maxLength: 10000, nullable: true),
                    High_Vulnerabilities_Count = table.Column<byte>(nullable: false),
                    Medium_Vulnerabilities_Count = table.Column<byte>(nullable: false),
                    Low_Vulnerabilities_Count = table.Column<byte>(nullable: false),
                    ReportVersion = table.Column<int>(nullable: false),
                    ViewFilePath_as_Detail = table.Column<string>(maxLength: 2000, nullable: true),
                    IsDone = table.Column<bool>(nullable: false),
                    Submitter_ApplicationUser_Ref = table.Column<int>(nullable: true),
                    JobTask_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TaskResponses", x => x.ID);
                    table.ForeignKey(
                        name: "FK_TaskResponses_AspNetUsers_Submitter_ApplicationUser_Ref",
                        column: x => x.Submitter_ApplicationUser_Ref,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Attachment_TaskResponse",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FileVirtualName = table.Column<string>(maxLength: 300, nullable: true),
                    FilePhysicalName = table.Column<string>(maxLength: 2000, nullable: true),
                    FilePhysicalPath = table.Column<string>(maxLength: 2000, nullable: true),
                    FileWebRootFullPath = table.Column<string>(maxLength: 2000, nullable: true),
                    Extention = table.Column<string>(maxLength: 100, nullable: true),
                    Lable = table.Column<string>(maxLength: 100, nullable: true),
                    ParrentObject_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Attachment_TaskResponse", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Attachment_TaskResponse_TaskResponses_ParrentObject_Ref",
                        column: x => x.ParrentObject_Ref,
                        principalTable: "TaskResponses",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "JobTasks",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ViewFilePath_as_ListItem = table.Column<string>(maxLength: 2000, nullable: true),
                    ViewFilePath_as_Detail = table.Column<string>(maxLength: 2000, nullable: true),
                    CreationDateTime = table.Column<DateTime>(nullable: true),
                    CreationDateTime_in_PersianDate = table.Column<string>(nullable: true),
                    Last_Modification_DateTime = table.Column<DateTime>(nullable: true),
                    Last_Modification_DateTime_in_PersianDate = table.Column<string>(nullable: true),
                    IsDeleted = table.Column<bool>(nullable: false),
                    ViewFilePath_as_Summary = table.Column<string>(maxLength: 2000, nullable: true),
                    ReportNumber = table.Column<string>(nullable: true),
                    Title = table.Column<string>(maxLength: 10000, nullable: false),
                    Description = table.Column<string>(maxLength: 10000, nullable: true),
                    Description_Printable = table.Column<string>(nullable: true),
                    Status = table.Column<int>(nullable: false),
                    DeadlineDays = table.Column<int>(nullable: false),
                    ExternalRequesterDetails = table.Column<string>(maxLength: 500, nullable: true),
                    PeriodNameForThirdParties = table.Column<string>(maxLength: 300, nullable: true),
                    LastReportVersion = table.Column<int>(nullable: false),
                    PentestType = table.Column<int>(nullable: false),
                    TaskResponse_to_getVulnerabilitiesCount_Ref = table.Column<int>(nullable: true),
                    Submitter_Pentester_Ref = table.Column<int>(nullable: true),
                    Project_Ref = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_JobTasks", x => x.ID);
                    table.ForeignKey(
                        name: "FK_JobTasks_Projects_Project_Ref",
                        column: x => x.Project_Ref,
                        principalTable: "Projects",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_JobTasks_Pentesters_Submitter_Pentester_Ref",
                        column: x => x.Submitter_Pentester_Ref,
                        principalTable: "Pentesters",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_JobTasks_TaskResponses_TaskResponse_to_getVulnerabilitiesCount_Ref",
                        column: x => x.TaskResponse_to_getVulnerabilitiesCount_Ref,
                        principalTable: "TaskResponses",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ReportDocNumberAndFiles",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Creation = table.Column<DateTime>(nullable: true),
                    IsDeleted = table.Column<bool>(nullable: false),
                    TaskResponse_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReportDocNumberAndFiles", x => x.ID);
                    table.ForeignKey(
                        name: "FK_ReportDocNumberAndFiles_TaskResponses_TaskResponse_Ref",
                        column: x => x.TaskResponse_Ref,
                        principalTable: "TaskResponses",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Tag_TaskResponse",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Text = table.Column<string>(maxLength: 1000, nullable: true),
                    ParrentEntityObject_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tag_TaskResponse", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Tag_TaskResponse_TaskResponses_ParrentEntityObject_Ref",
                        column: x => x.ParrentEntityObject_Ref,
                        principalTable: "TaskResponses",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VulnerablitiesTitles_for_TaskResponse",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Text = table.Column<string>(maxLength: 10000, nullable: true),
                    Label = table.Column<string>(maxLength: 1000, nullable: true),
                    ParrentEntityObject_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VulnerablitiesTitles_for_TaskResponse", x => x.ID);
                    table.ForeignKey(
                        name: "FK_VulnerablitiesTitles_for_TaskResponse_TaskResponses_ParrentEntityObject_Ref",
                        column: x => x.ParrentEntityObject_Ref,
                        principalTable: "TaskResponses",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Attachment_JobTask",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FileVirtualName = table.Column<string>(maxLength: 300, nullable: true),
                    FilePhysicalName = table.Column<string>(maxLength: 2000, nullable: true),
                    FilePhysicalPath = table.Column<string>(maxLength: 2000, nullable: true),
                    FileWebRootFullPath = table.Column<string>(maxLength: 2000, nullable: true),
                    Extention = table.Column<string>(maxLength: 100, nullable: true),
                    Lable = table.Column<string>(maxLength: 100, nullable: true),
                    ParrentObject_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Attachment_JobTask", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Attachment_JobTask_JobTasks_ParrentObject_Ref",
                        column: x => x.ParrentObject_Ref,
                        principalTable: "JobTasks",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "JobTask_Pentesters",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CreationDateTime = table.Column<DateTime>(nullable: true),
                    IsDeleted = table.Column<bool>(nullable: false),
                    JobTaskSammary_Ref = table.Column<int>(nullable: false),
                    Pentester_Ref = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_JobTask_Pentesters", x => x.ID);
                    table.ForeignKey(
                        name: "FK_JobTask_Pentesters_JobTasks_JobTaskSammary_Ref",
                        column: x => x.JobTaskSammary_Ref,
                        principalTable: "JobTasks",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_JobTask_Pentesters_Pentesters_Pentester_Ref",
                        column: x => x.Pentester_Ref,
                        principalTable: "Pentesters",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "SentLetters",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ViewFilePath_as_Summary = table.Column<string>(maxLength: 2000, nullable: true),
                    ViewFilePath_as_ListItem = table.Column<string>(maxLength: 2000, nullable: true),
                    ViewFilePath_as_Detail = table.Column<string>(maxLength: 2000, nullable: true),
                    CreationDateTime = table.Column<DateTime>(nullable: true),
                    CreationDateTime_in_PersianDate = table.Column<string>(nullable: true),
                    Last_Modification_DateTime = table.Column<DateTime>(nullable: true),
                    Last_Modification_DateTime_in_PersianDate = table.Column<string>(nullable: true),
                    IsDeleted = table.Column<bool>(nullable: false),
                    LetterNumber = table.Column<string>(maxLength: 50, nullable: true),
                    SentDate = table.Column<DateTime>(nullable: true),
                    SenderName = table.Column<string>(maxLength: 300, nullable: true),
                    ReceiverName = table.Column<string>(maxLength: 300, nullable: true),
                    Description = table.Column<string>(maxLength: 10000, nullable: true),
                    JobTask_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SentLetters", x => x.ID);
                    table.ForeignKey(
                        name: "FK_SentLetters_JobTasks_JobTask_Ref",
                        column: x => x.JobTask_Ref,
                        principalTable: "JobTasks",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Tag_JobTask",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Text = table.Column<string>(maxLength: 1000, nullable: true),
                    ParrentEntityObject_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tag_JobTask", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Tag_JobTask_JobTasks_ParrentEntityObject_Ref",
                        column: x => x.ParrentEntityObject_Ref,
                        principalTable: "JobTasks",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Attachment_ReportDocNumberAndFile",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FileVirtualName = table.Column<string>(maxLength: 300, nullable: true),
                    FilePhysicalName = table.Column<string>(maxLength: 2000, nullable: true),
                    FilePhysicalPath = table.Column<string>(maxLength: 2000, nullable: true),
                    FileWebRootFullPath = table.Column<string>(maxLength: 2000, nullable: true),
                    Extention = table.Column<string>(maxLength: 100, nullable: true),
                    Lable = table.Column<string>(maxLength: 100, nullable: true),
                    ParrentObject_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Attachment_ReportDocNumberAndFile", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Attachment_ReportDocNumberAndFile_ReportDocNumberAndFiles_ParrentObject_Ref",
                        column: x => x.ParrentObject_Ref,
                        principalTable: "ReportDocNumberAndFiles",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Attachment_with_two_Relations<ReportFileAndPDF>",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FileVirtualName = table.Column<string>(maxLength: 300, nullable: true),
                    FilePhysicalName = table.Column<string>(maxLength: 2000, nullable: true),
                    FilePhysicalPath = table.Column<string>(maxLength: 2000, nullable: true),
                    FileWebRootFullPath = table.Column<string>(maxLength: 2000, nullable: true),
                    Extention = table.Column<string>(maxLength: 100, nullable: true),
                    Lable = table.Column<string>(maxLength: 100, nullable: true),
                    ParrentObject_Filed1_Ref = table.Column<int>(nullable: true),
                    ParrentObject_Filed2_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Attachment_with_two_Relations<ReportFileAndPDF>", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Attachment_with_two_Relations<ReportFileAndPDF>_ReportDocNumberAndFiles_ParrentObject_Filed1_Ref",
                        column: x => x.ParrentObject_Filed1_Ref,
                        principalTable: "ReportDocNumberAndFiles",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Attachment_with_two_Relations<ReportFileAndPDF>_ReportDocNumberAndFiles_ParrentObject_Filed2_Ref",
                        column: x => x.ParrentObject_Filed2_Ref,
                        principalTable: "ReportDocNumberAndFiles",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Attachment_SentLetter",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FileVirtualName = table.Column<string>(maxLength: 300, nullable: true),
                    FilePhysicalName = table.Column<string>(maxLength: 2000, nullable: true),
                    FilePhysicalPath = table.Column<string>(maxLength: 2000, nullable: true),
                    FileWebRootFullPath = table.Column<string>(maxLength: 2000, nullable: true),
                    Extention = table.Column<string>(maxLength: 100, nullable: true),
                    Lable = table.Column<string>(maxLength: 100, nullable: true),
                    ParrentObject_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Attachment_SentLetter", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Attachment_SentLetter_SentLetters_ParrentObject_Ref",
                        column: x => x.ParrentObject_Ref,
                        principalTable: "SentLetters",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Tag_SentLetter",
                columns: table => new
                {
                    ID = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Text = table.Column<string>(maxLength: 1000, nullable: true),
                    ParrentEntityObject_Ref = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tag_SentLetter", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Tag_SentLetter_SentLetters_ParrentEntityObject_Ref",
                        column: x => x.ParrentEntityObject_Ref,
                        principalTable: "SentLetters",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_AspNetRoleClaims_RoleId",
                table: "AspNetRoleClaims",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "NormalizedName",
                unique: true,
                filter: "[NormalizedName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserClaims_UserId",
                table: "AspNetUserClaims",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserLogins_UserId",
                table: "AspNetUserLogins",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserRoles_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "AspNetUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "NormalizedUserName",
                unique: true,
                filter: "[NormalizedUserName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Attachment_JobTask_ParrentObject_Ref",
                table: "Attachment_JobTask",
                column: "ParrentObject_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_Attachment_Pentester_ParrentObject_Ref",
                table: "Attachment_Pentester",
                column: "ParrentObject_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_Attachment_Project_ParrentObject_Ref",
                table: "Attachment_Project",
                column: "ParrentObject_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_Attachment_ReportDocNumberAndFile_ParrentObject_Ref",
                table: "Attachment_ReportDocNumberAndFile",
                column: "ParrentObject_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_Attachment_SentLetter_ParrentObject_Ref",
                table: "Attachment_SentLetter",
                column: "ParrentObject_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_Attachment_TaskResponse_ParrentObject_Ref",
                table: "Attachment_TaskResponse",
                column: "ParrentObject_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_Attachment_with_two_Relations<ReportFileAndPDF>_ParrentObject_Filed1_Ref",
                table: "Attachment_with_two_Relations<ReportFileAndPDF>",
                column: "ParrentObject_Filed1_Ref",
                unique: true,
                filter: "[ParrentObject_Filed1_Ref] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Attachment_with_two_Relations<ReportFileAndPDF>_ParrentObject_Filed2_Ref",
                table: "Attachment_with_two_Relations<ReportFileAndPDF>",
                column: "ParrentObject_Filed2_Ref",
                unique: true,
                filter: "[ParrentObject_Filed2_Ref] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Comment_JobTask_ParrentEntityObject_Ref",
                table: "Comment_JobTask",
                column: "ParrentEntityObject_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_Comment_JobTask_RepliedComment_Ref",
                table: "Comment_JobTask",
                column: "RepliedComment_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_Comment_JobTask_SubmitterUserId",
                table: "Comment_JobTask",
                column: "SubmitterUserId");

            migrationBuilder.CreateIndex(
                name: "IX_Comment_Project_ParrentEntityObject_Ref",
                table: "Comment_Project",
                column: "ParrentEntityObject_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_Comment_Project_RepliedComment_Ref",
                table: "Comment_Project",
                column: "RepliedComment_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_Comment_Project_SubmitterUserId",
                table: "Comment_Project",
                column: "SubmitterUserId");

            migrationBuilder.CreateIndex(
                name: "IX_Comment_TaskResponse_ParrentEntityObject_Ref",
                table: "Comment_TaskResponse",
                column: "ParrentEntityObject_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_Comment_TaskResponse_RepliedComment_Ref",
                table: "Comment_TaskResponse",
                column: "RepliedComment_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_Comment_TaskResponse_SubmitterUserId",
                table: "Comment_TaskResponse",
                column: "SubmitterUserId");

            migrationBuilder.CreateIndex(
                name: "IX_JobTask_Pentesters_JobTaskSammary_Ref",
                table: "JobTask_Pentesters",
                column: "JobTaskSammary_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_JobTask_Pentesters_Pentester_Ref",
                table: "JobTask_Pentesters",
                column: "Pentester_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_JobTasks_Project_Ref",
                table: "JobTasks",
                column: "Project_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_JobTasks_Submitter_Pentester_Ref",
                table: "JobTasks",
                column: "Submitter_Pentester_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_JobTasks_TaskResponse_to_getVulnerabilitiesCount_Ref",
                table: "JobTasks",
                column: "TaskResponse_to_getVulnerabilitiesCount_Ref",
                unique: true,
                filter: "[TaskResponse_to_getVulnerabilitiesCount_Ref] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Pentesters_ApplicationUser_Ref",
                table: "Pentesters",
                column: "ApplicationUser_Ref",
                unique: true,
                filter: "[ApplicationUser_Ref] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Projects_Modifier_Pentester_Ref",
                table: "Projects",
                column: "Modifier_Pentester_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_Projects_ParrentProject_Ref",
                table: "Projects",
                column: "ParrentProject_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_Projects_Submitter_Pentester_Ref",
                table: "Projects",
                column: "Submitter_Pentester_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_ReportDocNumberAndFiles_TaskResponse_Ref",
                table: "ReportDocNumberAndFiles",
                column: "TaskResponse_Ref",
                unique: true,
                filter: "[TaskResponse_Ref] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_SentLetters_JobTask_Ref",
                table: "SentLetters",
                column: "JobTask_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_Tag_ApplicationUser_ParrentEntityObject_Ref",
                table: "Tag_ApplicationUser",
                column: "ParrentEntityObject_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_Tag_JobTask_ParrentEntityObject_Ref",
                table: "Tag_JobTask",
                column: "ParrentEntityObject_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_Tag_Pentester_ParrentEntityObject_Ref",
                table: "Tag_Pentester",
                column: "ParrentEntityObject_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_Tag_Project_ParrentEntityObject_Ref",
                table: "Tag_Project",
                column: "ParrentEntityObject_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_Tag_SentLetter_ParrentEntityObject_Ref",
                table: "Tag_SentLetter",
                column: "ParrentEntityObject_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_Tag_TaskResponse_ParrentEntityObject_Ref",
                table: "Tag_TaskResponse",
                column: "ParrentEntityObject_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_TaskResponses_JobTask_Ref",
                table: "TaskResponses",
                column: "JobTask_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_TaskResponses_Submitter_ApplicationUser_Ref",
                table: "TaskResponses",
                column: "Submitter_ApplicationUser_Ref");

            migrationBuilder.CreateIndex(
                name: "IX_VulnerablitiesTitles_for_TaskResponse_ParrentEntityObject_Ref",
                table: "VulnerablitiesTitles_for_TaskResponse",
                column: "ParrentEntityObject_Ref");

            migrationBuilder.AddForeignKey(
                name: "FK_Comment_JobTask_JobTasks_ParrentEntityObject_Ref",
                table: "Comment_JobTask",
                column: "ParrentEntityObject_Ref",
                principalTable: "JobTasks",
                principalColumn: "ID",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Comment_TaskResponse_TaskResponses_ParrentEntityObject_Ref",
                table: "Comment_TaskResponse",
                column: "ParrentEntityObject_Ref",
                principalTable: "TaskResponses",
                principalColumn: "ID",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_TaskResponses_JobTasks_JobTask_Ref",
                table: "TaskResponses",
                column: "JobTask_Ref",
                principalTable: "JobTasks",
                principalColumn: "ID",
                onDelete: ReferentialAction.Restrict);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Pentesters_AspNetUsers_ApplicationUser_Ref",
                table: "Pentesters");

            migrationBuilder.DropForeignKey(
                name: "FK_TaskResponses_AspNetUsers_Submitter_ApplicationUser_Ref",
                table: "TaskResponses");

            migrationBuilder.DropForeignKey(
                name: "FK_TaskResponses_JobTasks_JobTask_Ref",
                table: "TaskResponses");

            migrationBuilder.DropTable(
                name: "AspNetRoleClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserTokens");

            migrationBuilder.DropTable(
                name: "Attachment_JobTask");

            migrationBuilder.DropTable(
                name: "Attachment_Pentester");

            migrationBuilder.DropTable(
                name: "Attachment_Project");

            migrationBuilder.DropTable(
                name: "Attachment_ReportDocNumberAndFile");

            migrationBuilder.DropTable(
                name: "Attachment_SentLetter");

            migrationBuilder.DropTable(
                name: "Attachment_TaskResponse");

            migrationBuilder.DropTable(
                name: "Attachment_with_two_Relations<ReportFileAndPDF>");

            migrationBuilder.DropTable(
                name: "Comment_JobTask");

            migrationBuilder.DropTable(
                name: "Comment_Project");

            migrationBuilder.DropTable(
                name: "Comment_TaskResponse");

            migrationBuilder.DropTable(
                name: "ConfigurationFields");

            migrationBuilder.DropTable(
                name: "ErrorLogs");

            migrationBuilder.DropTable(
                name: "JobTask_Pentesters");

            migrationBuilder.DropTable(
                name: "Tag_ApplicationUser");

            migrationBuilder.DropTable(
                name: "Tag_JobTask");

            migrationBuilder.DropTable(
                name: "Tag_Pentester");

            migrationBuilder.DropTable(
                name: "Tag_Project");

            migrationBuilder.DropTable(
                name: "Tag_SentLetter");

            migrationBuilder.DropTable(
                name: "Tag_TaskResponse");

            migrationBuilder.DropTable(
                name: "VulnerablitiesTitles_for_TaskResponse");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "ReportDocNumberAndFiles");

            migrationBuilder.DropTable(
                name: "SentLetters");

            migrationBuilder.DropTable(
                name: "AspNetUsers");

            migrationBuilder.DropTable(
                name: "JobTasks");

            migrationBuilder.DropTable(
                name: "Projects");

            migrationBuilder.DropTable(
                name: "TaskResponses");

            migrationBuilder.DropTable(
                name: "Pentesters");
        }
    }
}
