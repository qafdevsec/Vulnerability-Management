using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.EntityFrameworkCore;
using ProjectSupport.Core.Models;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System.Drawing;
using System.Reflection;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using BlogPortal.Core.BussinessTemplatesModel.BlogPost;
using ProjectSupport.Infrastructure.Data;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ProjectSupport.Infrastructure
{
    public class ProjectSupportDB : IdentityDbContext<ApplicationUser,ApplicationRole,int,IdentityUserClaim<int>,
        ApplicationUserRole,IdentityUserLogin<int>, IdentityRoleClaim<int>, IdentityUserToken<int>>
    {
        public ProjectSupportDB() : base() { }
        public ProjectSupportDB(DbContextOptions<ProjectSupportDB> options) : base(options) { }


        // inherited DbSets:
        // database, model, roles, roleclaims, users, userRoles, userLogins, UserTokens, userclaims


        #region DbSets

        //public DbSet<ApplicationUser> ApplicationUsers { get; set; }
        //public DbSet<ApplicationRole> ApplicationRoles { get; set; }
        //public DbSet<ApplicationUserRole> ApplicationUserRoles { get; set; }


        public DbSet<JobTask_Pentester> JobTask_Pentesters { get; set; }
        public DbSet<JobTask> JobTasks { get; set; }
        public DbSet<MyString<TaskResponse>> VulnerablitiesTitles_for_TaskResponse { get; set; }
        public DbSet<Pentester> Pentesters { get; set; }
        public DbSet<Project> Projects { get; set; }
        public DbSet<ReportFileAndPDF> ReportDocNumberAndFiles { get; set; }
        public DbSet<SentLetter> SentLetters { get; set; }
        public DbSet<TaskResponse> TaskResponses { get; set; }
        public DbSet<ConfigurationFields> ConfigurationFields { get; set; }


        public DbSet<Attachment<JobTask>> Attachment_JobTask { get; set; }
        public DbSet<Attachment<Pentester>> Attachment_Pentester { get; set; }
        public DbSet<Attachment<Project>> Attachment_Project { get; set; }
        public DbSet<Attachment<ReportFileAndPDF>> Attachment_ReportDocNumberAndFile { get; set; }
        public DbSet<Attachment<SentLetter>> Attachment_SentLetter { get; set; }
        public DbSet<Attachment<TaskResponse>> Attachment_TaskResponse { get; set; }


        public DbSet<Comment<JobTask, ApplicationUser>> Comment_JobTask { get; set; }
        public DbSet<Comment<Project, ApplicationUser>> Comment_Project { get; set; }
        public DbSet<Comment<TaskResponse, ApplicationUser>> Comment_TaskResponse { get; set; }


        public DbSet<Tag<ApplicationUser>> Tag_ApplicationUser { get; set; }
        public DbSet<Tag<JobTask>> Tag_JobTask { get; set; }
        public DbSet<Tag<Pentester>> Tag_Pentester { get; set; }
        public DbSet<Tag<Project>> Tag_Project { get; set; }
        public DbSet<Tag<SentLetter>> Tag_SentLetter { get; set; }
        public DbSet<Tag<TaskResponse>> Tag_TaskResponse { get; set; }


        public DbSet<ErrorLog> ErrorLogs { get; set; }



        #endregion




        // Methodss--------------------------------------------------------------------------------------------------

        protected override void OnModelCreating(ModelBuilder modelBuilder){

            base.OnModelCreating(modelBuilder);

            DummyData.AppendLineToFileAsync("started");
            foreach (var entityType in modelBuilder.Model.GetEntityTypes())
            {
                var method = entityType.ClrType.GetMethod("OnEntityCreating", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Static);
                if (method != null)
                {
                    DummyData.AppendLineToFileAsync(entityType.Name);
                    var entityBuilder = new object[] {
                        typeof(ModelBuilder)
                        .GetMethod("Entity",new Type[]{})
                        .MakeGenericMethod(entityType.ClrType)
                        .Invoke(modelBuilder,null)
                    };
                    method.Invoke(null, entityBuilder);
                }
            }




            modelBuilder.Entity<ApplicationUserRole>(applicationUserRole =>
            {
                applicationUserRole.HasKey(ur => new { ur.UserId, ur.RoleId });

                applicationUserRole.HasOne(ur => ur.Role)
                    .WithMany(r => r.UserRoles)
                    .HasForeignKey(ur => ur.RoleId)
                    .IsRequired();

                applicationUserRole.HasOne(ur => ur.User)
                    .WithMany(r => r.UserRoles)
                    .HasForeignKey(ur => ur.UserId)
                    .IsRequired();
            });




            modelBuilder
                .Entity<ConfigurationFields>()
                .Property(e => e.Key)
                .HasConversion(new EnumToNumberConverter<ConfigurationFieldsNames, int>());








        }





        //const string connectionString = "Server=(localdb)\\mssqllocaldb;Database=ProjectSupportDB7;Trusted_Connection=True;MultipleActiveResultSets=true;ConnectRetryCount=0";
        const string connectionString = @"Data Source=myserver;Initial Catalog=ProjectSupportDB;User Id=tantaneh.com;password=myPassww0rd;Integrated Security=False";


        //const string connectionString = @"Server=.;Database=ProjectSupportDB;Trusted_Connection=True;MultipleActiveResultSets=true;ConnectRetryCount=0";

        ////const string connectionString = @"Server=WIN-DNDS1FPGD25\Administrator;Database=ProjectSupportDB;Trusted_Connection=True;MultipleActiveResultSets=true;ConnectRetryCount=0";
        ////const string connectionString = @"Server=WIN-DNDS1FPGD25;Database=ProjectSupportDB;Trusted_Connection=True;MultipleActiveResultSets=true;ConnectRetryCount=0;User Id=LoginForIIS;Password=P@ssw0rd;";


        // get connection string dynamically from: https://andrewlock.net/sharing-appsettings-json-configuration-files-between-projects-in-asp-net-core/
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            base.OnConfiguring(optionsBuilder);

            optionsBuilder.UseSqlServer(connectionString);
        }



    }

          




































}
