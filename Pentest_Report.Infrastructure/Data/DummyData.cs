using BlogPortal.Core.BussinessTemplatesModel.BlogPost;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using ProjectSupport.Core;
using ProjectSupport.Core.Models;
using Pentest_Report_Manager.Classes;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TaskStatus = ProjectSupport.Core.Models.TaskStatus;

namespace ProjectSupport.Infrastructure.Data
{
    public static class DummyData
    {
        private static ProjectSupportDB context;
        private static UserManager<ApplicationUser> userManager;
        private static RoleManager<ApplicationRole> roleManager;

        public static async Task InitializeDataRocors(
            ProjectSupportDB _context,
            UserManager<ApplicationUser> _userManager,
            RoleManager<ApplicationRole> _roleManager)
        {
            context = _context;
            userManager = _userManager;
            roleManager = _roleManager;

            AppendLineToFileAsync("its going to connect to db");

            try
            {


                await InitializeRealRoles();
                await InitializeDeveloperUsers();
                //await InitializefakeUsers();


                //var projs = _context.Projects.Where(p => string.IsNullOrEmpty(p.Description_Printable) && p.Description!= null).ToList();
                //foreach (Project project in projs)
                //    project.Description_Printable = project.Description.ReplaceLineBreaks();

                //var tasks = _context.JobTasks.Where(t => string.IsNullOrEmpty(t.Description_Printable) && t.Description != null).ToList();
                //foreach (var task in tasks)
                //    task.Description_Printable = task.Description.ReplaceLineBreaks();




                //await InitializeUsers();
                //AddProjects().GetAwaiter().GetResult();
                //await AddProjects();


                context.SaveChanges();
            }
            catch (Exception ee)
            {
                AppendLineToFileAsync("Errorrrrrrrrrrrrrrrrrrrrrrrrrrrrr:");
                AppendLineToFileAsync(ee.Message);
            }


        }




        private static async Task InitializeRealRoles()
        {
            if (await context.Roles.AnyAsync())
                return;

            var userRoles = Enum.GetValues(typeof(ProJectSupport_UserRoles)).Cast<ProJectSupport_UserRoles>();
            foreach (var role in userRoles)
            {
                IdentityResult roleResult = roleManager.CreateAsync(
                    new ApplicationRole(role.ToString(), "this is the administrator role")
                    ).Result;
            }

        }

        private static async Task InitializeDeveloperUsers()
        {

            string developerPassword = "P@ssw0rd";

            if (userManager.FindByNameAsync("admin").Result == null)
            {
                var user = new ApplicationUser
                {
                    UserName = "admin",
                    Email = "siya.hatami@gmail.com",
                    FullName = "Siamak Hatami",
                    Pentester = new Pentester()
                };
                user.RefereshTagList();
                var result = userManager.CreateAsync(user).Result;
                if (result.Succeeded)
                {
                    userManager.AddPasswordAsync(user, developerPassword).Wait();
                    userManager.AddToRoleAsync(user, ProJectSupport_UserRoles.Developer.ToString()).Wait();
                    userManager.AddToRoleAsync(user, ProJectSupport_UserRoles.Pentester.ToString()).Wait();
                }
            }

        }
        private static async Task InitializefakeUsers()
        {

            if (await context.Users.AnyAsync(u => u.UserName != "FsasNsg21"))
                return;


            string developerPassword = "P@ssw0rd";

            if (userManager.FindByNameAsync("FsasNsg10").Result == null)
            {
                var user = new ApplicationUser
                {
                    UserName = "FsasNsg10",
                    Email = "ali@gmail.com",
                    FullName = "Ali Ghayuomi",
                    Pentester = new Pentester()
                };
                user.RefereshTagList();
                var result = userManager.CreateAsync(user).Result;
                if (result.Succeeded)
                {
                    userManager.AddPasswordAsync(user, developerPassword).Wait();
                    userManager.AddToRoleAsync(user, ProJectSupport_UserRoles.Admin.ToString()).Wait();
                }
            }

        }



        // ----------------------------------------------------------------------------


        #region tempData


        public static void InitializeDataRocors2(
            ProjectSupportDB _context,
            UserManager<ApplicationUser> _userManager,
            RoleManager<ApplicationRole> _roleManager)
        {



            //var proj = _context.Projects.Include(s => s.JobTasks).FirstOrDefault();
            //var jtask = proj.JobTasks.FirstOrDefault();
            //context.Entry(jtask).Collection(b => b.TaskResponses).Load();


            //var tr = new TaskResponse()
            //{
            //    Title = "task respon1",
            //    Description = "task respon1",
            //    Project_to_getVulnerabilitiesCount=proj
            //    //Submitter_ApplicationUser = await context.Users.FirstOrDefaultAsync(a => a.FullName == "ali")
            //};
            //tr.ReportDocNumberAndFile = new ReportDocNumberAndFile() { };

            //jtask.TaskResponses.Add(tr);

            //try
            //{
            //    context.SaveChanges();
            //}
            //catch (Exception ex)
            //{
            //    return;
            //}


        }


        private static async Task InitializeUsers()
        {
            if (await context.Roles.AnyAsync())
                return;

            if (!roleManager.RoleExistsAsync(ProJectSupport_UserRoles.Admin.ToString()).Result)
            {
                ApplicationRole role = new ApplicationRole(ProJectSupport_UserRoles.Admin.ToString(), "this is the administrator role");
                IdentityResult roleResult = roleManager.CreateAsync(role).Result;
            }
            if (!roleManager.RoleExistsAsync(ProJectSupport_UserRoles.Pentester.ToString()).Result)
            {
                ApplicationRole role = new ApplicationRole(ProJectSupport_UserRoles.Pentester.ToString(), "this is the administrator role");
                IdentityResult roleResult = roleManager.CreateAsync(role).Result;
            }
            if (!roleManager.RoleExistsAsync(ProJectSupport_UserRoles.Developer.ToString()).Result)
            {
                ApplicationRole role = new ApplicationRole(ProJectSupport_UserRoles.Developer.ToString(), "this is the administrator role");
                IdentityResult roleResult = roleManager.CreateAsync(role).Result;
            }
            if (!roleManager.RoleExistsAsync(ProJectSupport_UserRoles.ExternalUser.ToString()).Result)
            {
                ApplicationRole role = new ApplicationRole(ProJectSupport_UserRoles.ExternalUser.ToString(), "this is the administrator role");
                IdentityResult roleResult = roleManager.CreateAsync(role).Result;
            }


            string password = "P@ssw0rd";

            if (userManager.FindByNameAsync("ali").Result == null)
            {
                var user = new ApplicationUser
                {
                    UserName = "ali@c.c",
                    Email = "ali@c.c",
                    FullName = "ali",
                    PhoneNumber = "1231231231",
                    Pentester = new Pentester()
                };

                var result = userManager.CreateAsync(user).Result;

                if (result.Succeeded)
                {
                    userManager.AddPasswordAsync(user, password).Wait();
                    userManager.AddToRoleAsync(user, ProJectSupport_UserRoles.Admin.ToString()).Wait();
                }
            }
            if (userManager.FindByNameAsync("ehsan").Result == null)
            {
                var user = new ApplicationUser
                {
                    UserName = "ehsan@c.c",
                    Email = "ehsan@c.c",
                    FullName = "ehsan",
                    PhoneNumber = "1231231231",
                    Pentester = new Pentester()
                };

                var result = userManager.CreateAsync(user).Result;

                if (result.Succeeded)
                {
                    userManager.AddPasswordAsync(user, password).Wait();
                    userManager.AddToRoleAsync(user, ProJectSupport_UserRoles.Pentester.ToString()).Wait();
                }
            }
            if (userManager.FindByNameAsync("siam").Result == null)
            {
                var user = new ApplicationUser
                {
                    UserName = "siam@c.c",
                    Email = "siam@c.c",
                    FullName = "siam",
                    PhoneNumber = "1231231231",
                    Pentester = new Pentester()
                };

                var result = userManager.CreateAsync(user).Result;

                if (result.Succeeded)
                {
                    userManager.AddPasswordAsync(user, password).Wait();
                    userManager.AddToRoleAsync(user, ProJectSupport_UserRoles.Pentester.ToString()).Wait();
                    userManager.AddToRoleAsync(user, ProJectSupport_UserRoles.Developer.ToString()).Wait();
                }
            }
            if (userManager.FindByNameAsync("rashidi").Result == null)
            {
                var user = new ApplicationUser
                {
                    UserName = "rashidi@c.c",
                    Email = "rashidi@c.c",
                    FullName = "rashidi",
                    PhoneNumber = "1231231231"
                };

                var result = userManager.CreateAsync(user).Result;

                if (result.Succeeded)
                {
                    userManager.AddPasswordAsync(user, password).Wait();
                    userManager.AddToRoleAsync(user, ProJectSupport_UserRoles.ExternalUser.ToString()).Wait();
                }
            }

        }

        private static async Task AddProjects(int count = 5)
        {
            if (await context.Projects.AnyAsync())
                return;


            Project project1 = new Project()
            {
                ProjectName = "proj1",
                Description = "proj1 Desc asdf asdl;kfja sd;lfkj asdl;kfjas dlkf jasldkfjglkjgklhdfgjksdhfgf dskghsdlfjkgh dsjkfghdfksjgh skdjlfgh dksfjgh dkjfghsdf kgjhsdfgjksdfh glsjkdfgh sdlgjkh dsjkfgh sjkdfghsdfg",
                AdomName = "adom1",
                Owner = "rashidi",
                PolicyName = "policy1",
                Priority = 4,
                ServerPool = "192.168.43.252",
                URL = "bmi.ir/url1",
                JobTasks = await newJobTasks(),
                Attachments = await newAttachmentsProj(),
                Comments = await newCommentsProj(),
                Submitter_Pentester = context.Users.FirstOrDefaultAsync(a => a.FullName == "ali").Result.Pentester
            };
            project1.RefereshTagList(context);

            Project project2 = new Project()
            {
                ProjectName = "proj2",
                Description = "proj1 Desc asdf asdl;kf",
                AdomName = "adom1",
                Owner = "rashidi",
                PolicyName = "policy2",
                Priority = 3,
                ServerPool = "192.168.13.27",
                URL = "bmi.ir/url2",
                ParrentProject = project1,
                JobTasks = newJobTasks(1).Result,
                Attachments = await newAttachmentsProj(2),
                Comments = await newCommentsProj(2),
                Submitter_Pentester = context.Users.FirstOrDefaultAsync(a => a.FullName == "ali").Result.Pentester
            };
            project2.RefereshTagList(context);

            Project project3 = new Project()
            {
                ProjectName = "proj3",
                Description = "proj3 Desc asdf asdl;kfproj3 Desc asdf asdl;kfproj3 Desc asdf asdl;kfproj3 Desc asdf asdl;kfproj3 Desc asdf asdl;kfproj3 Desc asdf asdl;kfproj3 Desc asdf asdl;kfproj3 Desc asdf asdl;kfproj3 Desc asdf asdl;kfproj3 Desc asdf asdl;kf",
                AdomName = "adom2",
                Owner = "ghasem",
                PolicyName = "policy3",
                Priority = 3,
                ServerPool = "192.168.13.27",
                URL = "bmi.ir/url2",
                ParrentProject = project1,
                JobTasks = newJobTasks().Result,
                Attachments = await newAttachmentsProj(),
                Comments = await newCommentsProj(),
                Submitter_Pentester = context.Users.FirstOrDefaultAsync(a => a.FullName == "siam").Result.Pentester
            };
            project2.RefereshTagList(context);

            Project project4 = new Project()
            {
                ProjectName = "proj4",
                Description = "proj4 asdf af 4 4444444 4 444 ",
                AdomName = "adom1",
                Owner = "rashidi",
                PolicyName = "policy4",
                Priority = 3,
                ServerPool = "192.168.13.27",
                URL = "bmi.ir/url2fsdf",
                ParrentProject = project2,
                JobTasks = newJobTasks(1).Result,
                Attachments = await newAttachmentsProj(1),
                Comments = await newCommentsProj(4),
                Submitter_Pentester = context.Users.FirstOrDefaultAsync(a => a.FullName == "siam").Result.Pentester
            };
            project2.RefereshTagList(context);


            Project project5 = new Project()
            {
                ProjectName = "proj5",
                Description = "proj5 Desc asdf asdl;kf",
                AdomName = "adom1",
                Owner = "rashidi",
                PolicyName = "policy98",
                Priority = 3,
                ServerPool = "192.168.13.27",
                URL = "bmi.ir/url2",
                ParrentProject = project1,
                JobTasks = newJobTasks(1).Result,
                Attachments = await newAttachmentsProj(2),
                Comments = await newCommentsProj(2),
                Submitter_Pentester = context.Users.FirstOrDefaultAsync(a => a.FullName == "ali").Result.Pentester
            };
            project2.RefereshTagList(context);


            List<Project> result = new List<Project>();
            result.Add(project1);
            result.Add(project2);
            result.Add(project3);
            result.Add(project4);
            result.Add(project5);

            context.AddRange(result);

        }

        private static async Task<ICollection<Comment<Project, ApplicationUser>>>
            newCommentsProj(int count = 5)
        {

            var result = new List<Comment<Project, ApplicationUser>>();
            if (await context.Comment_Project.AnyAsync())
                return result;

            var comment1 = new Comment<Project, ApplicationUser>()
            {
                SubmitterUser = await context.Users.FirstOrDefaultAsync(a => a.FullName == "ali"),
                Text = "text1 text1 text1  asdfk asdjfl;kasdfjasd;fjasdf;jasdfasdjf sdfjas dfkl;jsdfl;ksadfjasdklfj"
            };
            var comment2 = new Comment<Project, ApplicationUser>()
            {
                SubmitterUser = await context.Users.FirstOrDefaultAsync(a => a.FullName == "siam"),
                Text = "text2 alsdkfj asdlfk alksdjfalsdf",
                RepliedComment = comment1
            };
            var comment3 = new Comment<Project, ApplicationUser>()
            {
                SubmitterUser = await context.Users.FirstOrDefaultAsync(a => a.FullName == "siam"),
                Text = "text3333333333333333 33 3 33333333333333333333333333333333333333333333333333",
                RepliedComment = comment1
            };
            var comment4 = new Comment<Project, ApplicationUser>()
            {
                SubmitterUser = await context.Users.FirstOrDefaultAsync(a => a.FullName == "ehsan"),
                Text = "text4 text4 text4 text4 text4 text4 text4 text4 text4 text4 text4 text4 text4 text4  text1  asdfk asdjfl;kasdfjasd;fjasdf;jasdfasdjf sdfjas dfkl;jsdfl;ksadfjasdklfj",
                RepliedComment = comment2
            };
            var comment5 = new Comment<Project, ApplicationUser>()
            {
                SubmitterUser = await context.Users.FirstOrDefaultAsync(a => a.FullName == "ali"),
                Text = "text5 5555 5555 5 asdfasd jfkl;sdf dfjklaklsdf afjklskflasdfj; asdklfjsdaklfsdajfklasdjf",
                RepliedComment = comment4
            };

            result.Add(comment1);
            result.Add(comment2);
            result.Add(comment3);
            result.Add(comment4);
            result.Add(comment5);

            return result.Take(count).ToList();
        }

        private static async Task<ICollection<Attachment<Project>>>
            newAttachmentsProj(int count = 5)
        {

            var result = new List<Attachment<Project>>();
            if (await context.Attachment_Project.AnyAsync())
                return result;

            var attachment1 = new Attachment<Project>()
            {
                FileVirtualName = "file1",
                FilePhysicalPath = "/uploaded/file1"
            };
            var attachment2 = new Attachment<Project>()
            {
                FileVirtualName = "file2",
                FilePhysicalPath = "/uploaded/file2"
            };
            var attachment3 = new Attachment<Project>()
            {
                FileVirtualName = "file3",
                FilePhysicalPath = "/uploaded/file3"
            };
            var attachment4 = new Attachment<Project>()
            {
                FileVirtualName = "file4",
                FilePhysicalPath = "/uploaded/file4"
            };
            var attachment5 = new Attachment<Project>()
            {
                FileVirtualName = "file5",
                FilePhysicalPath = "/uploaded/file5"
            };

            result.Add(attachment1);
            result.Add(attachment2);
            result.Add(attachment3);
            result.Add(attachment4);
            result.Add(attachment5);

            return result.Take(count).ToList();
        }

        private static async Task<List<JobTask>> newJobTasks(int count = 5)
        {

            var result = new List<JobTask>();
            if (await context.JobTasks.AnyAsync())
                return result;

            var jobtask1 = new JobTask()
            {
                Pentesters = getJobTask_Pentesters(3),
                //Attachments = ???,
                //Comments = ???,
                Status = TaskStatus.Assigned,
                ExternalRequesterDetails = "asdf asd fljaksdjfa;sdklfj sadfklja; sdfj asldkfj askldfj",
                DeadlineDays = 10,
                Description = "fas dflsakdjf al;kasl; dfjagkjhflg;kjasdhf;aofih weoir hwjklefnjsadcvhu wefhqwurhqweuirh qwuerh qwiebfuqweifceiucqwehiouh euih wieufdhweq iufhweuifhwfcuiasnhdckjsdhcfuadshf saudfhasdiuf",
                PeriodNameForThirdParties = "period1212",
                Submitter_Pentester = getPentesters(3).Reverse().FirstOrDefault(),
                //TaskResponses = ????
            };

            var jobtask2 = new JobTask()
            {
                Pentesters = getJobTask_Pentesters(5),
                //Attachments = ???,
                //Comments = ???,
                Status = TaskStatus.Closed,
                ExternalRequesterDetails = "asdf asd fljaksdjfa;sdklfj sadfklja; sdfj asldkfj askldfjasdf asd fljaksdjfa;sdklfj sadfklja; sdfj asldkfj askldfjasdf asd fljaksdjfa;sdklfj sadfklja; sdfj asldkfj askldfjasdf asd fljaksdjfa;sdklfj sadfklja; sdfj asldkfj askldfjasdf asd fljaksdjfa;sdklfj sadfklja; sdfj asldkfj askldfj",
                DeadlineDays = 1,
                Description = "fas dflsakdjf al;kasl; dfjagkjhflg;kjasdhf;aofih weoir hwjklefnjsadcvhu wefhqwurhqweuirh qwuerh qwiebfuqweifceiucqwehiouh euih wieufdhweq iufhweuifhwfcuiasnhdckjsdhcfuadshf saudfhasdiuf dfjagkjhflg;kjasdhf;aofih weoir hwjklefnjsadcvhu wefhqwurhqweuirh qwuerh qwiebfuqweifceiucqwehiouh euih wieufdhweq iufhweuifhwfcuiasnhdckjsdhcfuadshf saudfhasdiuf dfjagkjhflg;kjasdhf;aofih weoir hwjklefnjsadcvhu wefhqwurhqweuirh qwuerh qwiebfuqweifceiucqwehiouh euih wieufdhweq iufhweuifhwfcuiasnhdckjsdhcfuadshf saudfhasdiuf dfjagkjhflg;kjasdhf;aofih weoir hwjklefnjsadcvhu wefhqwurhqweuirh qwuerh qwiebfuqweifceiucqwehiouh euih wieufdhweq iufhweuifhwfcuiasnhdckjsdhcfuadshf saudfhasdiuf dfjagkjhflg;kjasdhf;aofih weoir hwjklefnjsadcvhu wefhqwurhqweuirh qwuerh qwiebfuqweifceiucqwehiouh euih wieufdhweq iufhweuifhwfcuiasnhdckjsdhcfuadshf saudfhasdiuf dfjagkjhflg;kjasdhf;aofih weoir hwjklefnjsadcvhu wefhqwurhqweuirh qwuerh qwiebfuqweifceiucqwehiouh euih wieufdhweq iufhweuifhwfcuiasnhdckjsdhcfuadshf saudfhasdiuf",
                PeriodNameForThirdParties = "period12144",
                Submitter_Pentester = getPentesters(3).Reverse().FirstOrDefault(),
                //TaskResponses = ????
            };
            var jobtask3 = new JobTask()
            {
                Pentesters = getJobTask_Pentesters(0),
                //Attachments = ???,
                //Comments = ???,
                Status = TaskStatus.Defined,
                ExternalRequesterDetails = "asdf asd flj",
                DeadlineDays = 1,
                Description = "fas dflsakdjf al;kasl; dfjagkjhflg;",
                PeriodNameForThirdParties = "period12144",
                Submitter_Pentester = getPentesters(1).Reverse().FirstOrDefault(),
                //TaskResponses = ????
            };
            var jobtask4 = new JobTask()
            {
                Pentesters = getJobTask_Pentesters(1),
                //Attachments = ???,
                //Comments = ???,
                Status = TaskStatus.Halt,
                ExternalRequesterDetails = "asdf asd fljaksdjfa;sdklfj sadfklja; sdfj asldkfj askldfjasdf asd fljaksdjfa;sdklfj sadfklja; sdfj asldkfj askldfjasdf asd fljaksdjfa;sdklfj sadfklja; sdfj asldkfj askldfjasdf asd fljaksdjfa;sdklfj sadfklja; sdfj asldkfj askldfjasdf asd fljaksdjfa;sdklfj sadfklja; sdfj asldkfj askldfj",
                DeadlineDays = 1,
                Description = "fas dflsakdjf al;kasl; dfjagkjhflg;kjasdhf;aofih weoir hwjklefnjsadcvhu wefhqwurhqweuirh qwuerh qwiebfuqweifceiucqwehiouh euih wieufdhweq iufhweuifhwfcuiasnhdckjsdhcfuadshf saudfhasdiuf dfjagkjhflg;kjasdhf;aofih weoir hwjklefnjsadcvhu wefhqwurhqweuirh qwuerh qwiebfuqweifceiucqwehiouh euih wieufdhweq iufhweuifhwfcuiasnhdckjsdhcfuadshf saudfhasdiuf dfjagkjhflg;kjasdhf;aofih weoir hwjklefnjsadcvhu wefhqwurhqweuirh qwuerh qwiebfuqweifceiucqwehiouh euih wieufdhweq iufhweuifhwfcuiasnhdckjsdhcfuadshf saudfhasdiuf dfjagkjhflg;kjasdhf;aofih weoir hwjklefnjsadcvhu wefhqwurhqweuirh qwuerh qwiebfuqweifceiucqwehiouh euih wieufdhweq iufhweuifhwfcuiasnhdckjsdhcfuadshf saudfhasdiuf dfjagkjhflg;kjasdhf;aofih weoir hwjklefnjsadcvhu wefhqwurhqweuirh qwuerh qwiebfuqweifceiucqwehiouh euih wieufdhweq iufhweuifhwfcuiasnhdckjsdhcfuadshf saudfhasdiuf dfjagkjhflg;kjasdhf;aofih weoir hwjklefnjsadcvhu wefhqwurhqweuirh qwuerh qwiebfuqweifceiucqwehiouh euih wieufdhweq iufhweuifhwfcuiasnhdckjsdhcfuadshf saudfhasdiuf",
                PeriodNameForThirdParties = "period12144",
                Submitter_Pentester = getPentesters(2).Reverse().FirstOrDefault(),
                //TaskResponses = ????
            };
            var jobtask5 = new JobTask()
            {
                Pentesters = getJobTask_Pentesters(5),
                //Attachments = ???,
                //Comments = ???,
                Status = TaskStatus.Closed,
                ExternalRequesterDetails = "asdf asd fljaksdjfa;sdklfj sadfklja; sdfj asldkfj askldfjasdf asd fljaksdjfa;sdklfj sadfklja; sdfj asldkfj askldfjasdf asd fljaksdjfa;sdklfj sadfklja; sdfj asldkfj askldfjasdf asd fljaksdjfa;sdklfj sadfklja; sdfj asldkfj askldfjasdf asd fljaksdjfa;sdklfj sadfklja; sdfj asldkfj askldfj",
                DeadlineDays = 1,
                Description = "fas dflsakdjf al;kasl; dfjagkjhflg;kjasdhf;aofih weoir hwjklefnjsadcvhu wefhqwurhqweuirh qwuerh qwiebfuqweifceiucqwehiouh euih wieufdhweq iufhweuifhwfcuiasnhdckjsdhcfuadshf saudfhasdiuf dfjagkjhflg;kjasdhf;aofih weoir hwjklefnjsadcvhu wefhqwurhqweuirh qwuerh qwiebfuqweifceiucqwehiouh euih wieufdhweq iufhweuifhwfcuiasnhdckjsdhcfuadshf saudfhasdiuf dfjagkjhflg;kjasdhf;aofih weoir hwjklefnjsadcvhu wefhqwurhqweuirh qwuerh qwiebfuqweifceiucqwehiouh euih wieufdhweq iufhweuifhwfcuiasnhdckjsdhcfuadshf saudfhasdiuf dfjagkjhflg;kjasdhf;aofih weoir hwjklefnjsadcvhu wefhqwurhqweuirh qwuerh qwiebfuqweifceiucqwehiouh euih wieufdhweq iufhweuifhwfcuiasnhdckjsdhcfuadshf saudfhasdiuf dfjagkjhflg;kjasdhf;aofih weoir hwjklefnjsadcvhu wefhqwurhqweuirh qwuerh qwiebfuqweifceiucqwehiouh euih wieufdhweq iufhweuifhwfcuiasnhdckjsdhcfuadshf saudfhasdiuf dfjagkjhflg;kjasdhf;aofih weoir hwjklefnjsadcvhu wefhqwurhqweuirh qwuerh qwiebfuqweifceiucqwehiouh euih wieufdhweq iufhweuifhwfcuiasnhdckjsdhcfuadshf saudfhasdiuf",
                PeriodNameForThirdParties = "period12144",
                Submitter_Pentester = getPentesters(2).Reverse().FirstOrDefault(),
                //TaskResponses = ????
            };

            jobtask1.RefereshTagList(context);
            jobtask2.RefereshTagList(context);
            jobtask3.RefereshTagList(context);
            jobtask4.RefereshTagList(context);
            jobtask5.RefereshTagList(context);

            result.Add(jobtask1);
            result.Add(jobtask2);
            result.Add(jobtask3);
            result.Add(jobtask4);
            result.Add(jobtask5);

            return result.Take(count).ToList();
        }

        private static ICollection<JobTask_Pentester> getJobTask_Pentesters(int count)
        {

            var result = new List<JobTask_Pentester>();
            if (context.JobTasks.Any())
                return result;

            var jp1 = new JobTask_Pentester()
            {
                Pentester = getPentesters(3).Reverse().FirstOrDefault()
            };
            var jp2 = new JobTask_Pentester()
            {
                Pentester = getPentesters(2).Reverse().FirstOrDefault()
            };
            var jp3 = new JobTask_Pentester()
            {
                Pentester = getPentesters(3).Reverse().FirstOrDefault()
            };
            var jp4 = new JobTask_Pentester()
            {
                Pentester = getPentesters(1).Reverse().FirstOrDefault()
            };
            var jp5 = new JobTask_Pentester()
            {
                Pentester = getPentesters(3).Reverse().FirstOrDefault()
            };

            result.Add(jp1);
            result.Add(jp2);
            result.Add(jp3);
            result.Add(jp4);
            result.Add(jp5);

            return result.Take(count).ToList();
        }


        private static ICollection<Pentester> getPentesters(int count)
        {
            var result = context.Users.Where(a => a.Pentester != null)
                .Select(a => a.Pentester).ToList();

            return result.Take(count).ToList();
        }

        public static void AppendLineToFileAsync(string line)
        {
            var path = Path.GetFullPath("~/wwwroot/log.txt").Replace("~\\", "");

            using (StreamWriter stream = new FileInfo(path).AppendText())
            {
                stream.WriteLine(line);
            }
        }


        #endregion


    }
}
