@model ProjectSupport.Core.Models.JobTask

<!-- Card -->
<div class="card card-cascade mb-3 ">

    <style>
        .card.card-cascade .view.view-cascade .card-header-subtitle {
            justify-content: center;
        }

        .max-height-65 {
            max-width: 65%;
        }

        .fc-black {
            color: black !important;
        }

        .card-body.card-body-cascade > div {
            margin-bottom: 10px !important;
        }


        .card-body.card-body-cascade #detailsLink {
            opacity:0;
        }
        .card-body.card-body-cascade:hover #detailsLink {
            opacity: 1;
        }
            
    </style>

    <!-- Card image -->
    <div class="view view-cascade gradient-card-header blue-gradient py-3">

        <!-- Title -->
        <h6 class="card-header-title mb-2 row pl-2">
            <i class="fas fa-calendar mr-2"></i>
            @Html.DisplayFor(model => model.CreationDateTime_in_PersianDate)
            <div class="ml-auto float-right mr-1 mt-n1 mb-2 px-3 py-1">
                    @if (Model.PentestType == PentestType.Black)
                    {
                        <span class="badge badge-dark d-block float-right ml-auto p-1 rounded">Black</span>
                    }
                    else if (Model.PentestType == PentestType.Gray)
                    {
                        <span class="badge  d-block float-right ml-auto  p-1" style="background-color:darkgray">Gray</span>
                    }
                    else if (Model.PentestType == PentestType.White)
                    {
                        <span class="badge white d-block float-right ml-auto fc-black  p-1">White</span>
                    }
            </div>
        </h6>
        <!-- Subtitle -->
        <p class="card-header-subtitle mb-0 row text-center  ">
            @Html.DisplayFor(model => model.Title)
        </p>

    </div>

    <!-- Card content -->
    <div class="card-body card-body-cascade text-center px-4 pb-1 mx-1">


        <div class="row text-left ">
            <strong class="d-inline ">Project:&nbsp&nbsp</strong>
            <a class="card-text text-truncate font-italic max-height-65" href="~/projects/@Model.Project.ID">
                @Html.DisplayFor(model => model.Project.ProjectName)
            </a>
        </div>




        @{
            bool isExternal = false;
            foreach (var pent in Model.Pentesters)
            {
                if (pent.Pentester.ThirdParty)
                {
                    isExternal = true;
                    break;
                }
            }

            if (isExternal || !string.IsNullOrEmpty(Model.PeriodNameForThirdParties))
            {
                <div class="row text-left ">
                    <strong class="d-inline ">ThirdParty Period:&nbsp&nbsp</strong>
                    <p[ class="card-text text-truncate font-italic max-height-65" href="~/projects/details/@Model.Project.ID">
                        @Html.DisplayFor(model => model.PeriodNameForThirdParties)
                    </p[>
                </div>
            }
        }


        @if (Model.DeadlineDays > 0 && Model.CreationDateTime?.AddDays(Model.DeadlineDays) >= DateTime.Now)
        {
            <div class="row text-left ">
                <strong class="d-inline ">Deadline days:&nbsp&nbsp</strong>
                <p[ class="card-text text-truncate font-italic max-height-65" href="~/projects/details/@Model.Project.ID">
                    @Html.DisplayFor(model => model.DeadlineDays)
                </p[>
            </div>
        }


        <div class="row text-left ">
            <strong class="d-inline ">Pentesters:&nbsp&nbsp</strong>
            @foreach (var pentester in Model.Pentesters)
            {
                <div class="chip">
                    @*<img src="https://mdbootstrap.com/img/Photos/Avatars/avatar-6.jpg" alt="Contact Person">*@
                    <i class="fas fa-user mr-1"></i>
                    @Html.DisplayFor(model => pentester.Pentester.ApplicationUser.FullName)
                </div>
            }

        </div>

        @if (Model.Description?.Length>0)
        {
            <hr />
            <p class="card-text text-justify @*text-truncate*@ text-center @Model.Description.GetTextLangDirection() ">
                @Html.Raw(Model.Description_Printable)
            </p>
        }


        <hr>
        <div class="text-left p-0 " style="font-size:12px;">
           

            @{
                var complated = false;
                TaskResponse lastResponse = Model.TaskResponse_to_getVulnerabilitiesCount;
                if (lastResponse != null && (lastResponse.IsDone ||
                    (Model.TaskResponses.LastOrDefault()?.High_Vulnerabilities_Count == 0 &&
                    Model.TaskResponses.LastOrDefault()?.Medium_Vulnerabilities_Count == 0 &&
                    Model.TaskResponses.LastOrDefault()?.Low_Vulnerabilities_Count == 0)
                    ))
                {
                    complated = true;
                }
            }
            @if (complated)
            {
                <i class="fas fa-shield-alt mr-2 fa-lg blue-text"></i>
                <i class="fas fa-check fa-md pr-2 blue-text fa-lg" aria-hidden="true"></i>
            }
            else if (lastResponse == null)
            {
                <i class="fas fa-shield-alt mr-2 fa-lg green-text"></i>
                <span class="green-text fa-lg">@("In Progress")</span>
            }
            else
            {
                <i class="fas fa-shield-alt mr-2 fa-lg orange-text"></i>
                <span class="red-text fa-lg">H:</span>@(lastResponse.High_Vulnerabilities_Count)@:,&nbsp;
                <span class="orange-ic fa-lg">M:</span>@(lastResponse.Medium_Vulnerabilities_Count)@:,&nbsp;
                <span class="blue-text fa-lg">L:</span>@(lastResponse.Low_Vulnerabilities_Count)
            }



            @*<a class="px-2 fa-lg tw-ic float-right" href="~/Tasks/Details/@Model.ID#comments">
            <i class="far fa-comments pr-1"></i>
            @Model.Comments.Where(c => c.IsDeleted == false).Count()
        </a>
        <a class="px-2 fa-lg tw-ic float-right" href="~/Tasks/Details/@Model.ID#ReplyPosts">
            <i class="fas fa-reply"></i>
            @Model.TaskResponses.Where(j => j.IsDeleted == false).Count()
        </a>*@



            <a id="detailsLink" href="~/Projects/@Model.Project_Ref/Tasks/@Model.ID" class="fa-lg float-right blue-text">
                <span class="blue-text ">Read more</span>
                <i class="fas fa-angle-double-right fa-lg blue-text"></i>
            </a>


        </div>



        @*<!-- Twitter -->
        <a class="px-2 fa-lg tw-ic"><i class="fab fa-twitter"> </i></a>
        <!-- Linkedin -->
        <a class="px-2 fa-lg li-ic"><i class="fab fa-linkedin-in"> </i></a>
        <!-- Facebook -->
        <a class="px-2 fa-lg fb-ic"><i class="fab fa-facebook-f"> </i></a>
        <!-- Email -->
        <a class="px-2 fa-lg email-ic"><i class="fas fa-envelope"> </i></a>*@

    </div>

</div>
<!-- Card -->

