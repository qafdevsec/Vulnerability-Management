@model ProjectSupport.Core.Models.JobTask
@*@model IEnumerable<ProjectSupport.Core.Models.TaskResponse>*@
@{
    ViewData["Title"] = "Details";
    ViewData["Model"] = Model;
}



<br class="my-4" />

<div class="row px-4 text-center justify-content-center" style="padding-top: 10px; padding-bottom: 25px; ">

    <div class="btn-group pull-right" role="group" aria-label="Basic example">
        <a href="~/Projects/@Model.Project_Ref/tasks/@Model.ID/Responses/done" type="button" class="btn btn-outline-deep-purple btn-rounded waves-effect">
            <i class="fas fa-check fa-md pr-2"
               aria-hidden="true"></i> Done (No Vulnerabilities)
        </a>
        <div type="button" class="btn btn-outline btn-rounded waves-effect btn-mdb-color">
            Document Number: @Model.ReportNumber
        </div>

        <a href="~/Projects/@Model.Project_Ref/tasks/@Model.ID/Responses/0" type="button" class="btn btn-outline-deep-purple btn-rounded waves-effect">
            <i class="fas fa-plus fa-md pr-2"
               aria-hidden="true"></i>Add a New Report
        </a>
    </div>


</div>




@{
    ViewBag.ContainerName = "tasksList_all_container";
    foreach (var response in Model.TaskResponses.Where(r => !r.IsDeleted).OrderByDescending(r => r.ID))
    {
        string viewPath = (string.IsNullOrEmpty(response.ViewFilePath_as_Detail) ? "~/Views/Responses/Details.cshtml" : response.ViewFilePath_as_Detail);

        string viewFromAnotherController = RenderExtention.RenderViewToStringAsynC<EntitySingle>(
            ViewBag.controller as Controller,
            viewPath,
            response);

        @Html.Raw(viewFromAnotherController);
    }
}







