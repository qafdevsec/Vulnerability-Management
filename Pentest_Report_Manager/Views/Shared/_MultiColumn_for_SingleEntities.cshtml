@model IEnumerable<EntitySingle>



<div id="device-size" class="pt-2 ">
    <div id="containerXS" class="row d-sm-none columnsContainer">
        <div class="col-12 column">
            @if (Model != null)
            {
                string viewPath;
                foreach (var _entity in Model)
                {
                    viewPath = (!string.IsNullOrEmpty(ViewBag.viewPath) ? ViewBag.viewPath : _entity.ViewFilePath_as_Summary);

                    string viewFromAnotherController = RenderExtention.RenderViewToStringAsynC<EntitySingle>(
                        Context.Items["controller"] as Controller,
                        viewPath,
                        _entity);

                    @Html.Raw(viewFromAnotherController);
                }
            }
        </div>
    </div>
    <div id="containerSmMdLg" class="row d-none d-sm-flex d-xl-none columnsContainer">
        <div class="col-6 column"></div>
        <div class="col-6 pl-1 column"></div>
    </div>
    <div id="containerXL" class="row  d-none d-none d-xl-flex columnsContainer">
        <div id="containerXLcol1" class="col-4 column"></div>
        <div id="containerXLcol2" class="col-4 pl-1 column"></div>
        <div id="containerXLcol3" class="col-4 pl-1 column"></div>
    </div>
</div>




        <script>

            // variables -----------------------------------------------------------------------
            // [0 - xs - [768px - sm -  [992px   md    [1200px  lg  ...)


            $(document).ready(function () {

                var multiColumnLayout = {
                    _columnsContainer: null,
                    get columnsContainer() {
                        if (this._columnsContainer !== null) {
                            return this._columnsContainer;
                        }
                        else {
                            let newColumnsContainer = $('#device-size').find('div.columnsContainer:visible').first();
                            this._columnsContainer = $(newColumnsContainer);
                            return this._columnsContainer;
                        }
                    },
                    set columnsContainer(val) {
                        this._columnsContainer = val;
                    }
                };

                // functions -----------------------------------------------------------------------
                window.addEventListener("resize", function () {

                    let newColumnsContainer = $('#device-size').find('div.columnsContainer:visible').first();
                    newColumnsContainer = $(newColumnsContainer);
                    if (multiColumnLayout.columnsContainer.attr('id') == newColumnsContainer.attr('id')) {
                        return;
                    }
                    let oldColumnsContainer = multiColumnLayout.columnsContainer;
                    // change oldColumnsContainer to current
                    multiColumnLayout.columnsContainer = newColumnsContainer;

                    //---------------------------------------------------------------------------------------
                    // we have an valid window resize with {oldColumnsContainer, newColumnsContainer}
                    // move all posts from oldColumnsContainer to newColumnsContainer

                    let isEmpty = false;
                    while (!isEmpty) {
                        var currentPost;
                        isEmpty = true;
                        oldColumnsContainer.find('> .column').each(function () {
                            let column = $(this);
                            currentPost = column.find(">:first-child").first();
                            if (currentPost.length > 0) {
                                isEmpty = false;
                                newColumnsContainer.addChildToShortestColumn(currentPost);
                            }
                        });
                    }

                });


                $.fn.addChildToShortestColumn = function (inputHtml) {
                    let newColumnsContainer = $(this);

                    var shortestColumn = null;
                    var shortestColumn_Height = -1;

                    var _columns = newColumnsContainer.find('> .column');
                    for (var candidateColumn of _columns) {
                        var candidate = $(candidateColumn);

                        var children = candidate.find('>');
                        var currentHeight;
                        if (children == null || children.length == 0) {
                            currentHeight = 0;
                        }
                        else {
                            currentHeight = children.last().offset().top + children.last().height();
                        }

                        if (shortestColumn == null || currentHeight < shortestColumn_Height) {
                            shortestColumn = candidate;
                            shortestColumn_Height = currentHeight;
                        }
                    }

                    if (shortestColumn != null) {
                        shortestColumn.append(inputHtml);
                    }
                    else { console.log("No column is found"); }

                };


                // Init -----------------------------------------------------------------------
                multiColumnLayout.columnsContainer = $('#device-size').find('> #containerXS').first();

                var resizeEvent = window.document.createEvent('UIEvents');
                resizeEvent.initUIEvent('resize', true, false, window, 0);
                window.dispatchEvent(resizeEvent);

            });


        </script>



