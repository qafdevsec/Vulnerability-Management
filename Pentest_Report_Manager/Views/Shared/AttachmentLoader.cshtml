@model AttachmentUploadObject

<style>
    .attachment-progress-bg {
        background-color: #c5c3be !important;
    }
</style>





<div class="  w-100 attachmentCard">

    @{ 
        string ids = "";
        if (Model.Attachments != null && Model.Attachments.ToList().Count > 0)
        {
            ids = string.Join(",", Model.Attachments.Select(a => a.FilePhysicalName));
        }
    }

    <input id="attachmentsIDsList" name="attachmentsIDsList" value="@ids" class="d-none" />

    <div class="card-body text-left">
        <h5 class=" mb-0 mr-auto d-inline-block">Attachments</h5>
        <div class="btn btn-info btn-sm my-0 ml-4 px-3 d-inline-block">
            <i class="fas fa-plus fa-lg"></i>
        </div>
    </div>

    <input id="tempSelectedFiles" type="file" class="d-none" multiple >
    <ul tabindex="1" class="flexdatalist-multiple flex0 mt-n2 border attachmentList">
        <li class="chip lighten-4 waiting d-none" fileId="">
            <div class="spinner-border spinner-border-sm mr-1" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <span class="text">aa aaaaa</span>
            <i class="close fas fa-times fdl-remove"></i>
        </li>
        <li class="chip lighten-4 inprogress d-none h-p35" fileId="">
            <span class="text">aa aaaaa</span>
            <i class="close fas fa-times fdl-remove mb-nn6"></i>
            <div class="progress md-progress mb-1 attachment-progress-bg h-p4 mt-nn6">
                <div class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        </li>
        <li class="chip lighten-4 completed  d-none" fileId="">
            <span class="text">aa aaaaa</span>
            <i class="close fas fa-times fdl-remove"></i>
        </li>
        <li class="chip lighten-4 failed bg-warning d-none" fileId="">
            <i class="fas fa-redo-alt cursor-pointer mr-1"></i>
            <span class="text">aa aaaaa</span>
            <i class="close fas fa-times fdl-remove"></i>
        </li>
        
        @if (Model.Attachments != null )
        {
            foreach (var attach in Model.Attachments)
            {
                <li class="chip lighten-4 completed" fileId="@attach.FilePhysicalName">
                    <span class="text">@attach.FileVirtualName</span>
                    <i class="close fas fa-times fdl-remove"></i>
                </li>
            }
        }
    </ul>




</div>



<script>

    $(document).ready(function () {
        {


            var attachmentCard = $(".attachmentCard");
            var attachmentList = attachmentCard.find("> ul");
            var attachmentTemplate_Waiting = attachmentList.find("> li.waiting.d-none");
            var attachmentTemplate_inprogress = attachmentList.find("> li.inprogress.d-none");
            var attachmentTemplate_completed = attachmentList.find("> li.completed.d-none");
            var attachmentTemplate_failed = attachmentList.find("> li.failed.d-none");
            var tempSelectedFiles = attachmentCard.find("> #tempSelectedFiles");
            var attachmentsIDsListInput = attachmentCard.find("> #attachmentsIDsList");
            var numFiles = 0;


            attachmentList.find("> li > i.fdl-remove").off().click(function () {
                $(this).closest("li").remove();
                updateAttachment_FileIdsList_Input();
            });

            attachmentCard.find(".card-body .btn").off().click(function () {
                tempSelectedFiles.trigger('click');
            });

            tempSelectedFiles.value = "";
            tempSelectedFiles.change(function (event) {
                for (var i = 0; i < this.files.length; i++) {
                    var file = this.files[i];
                    var newAttachment = attachmentTemplate_Waiting.clone();
                    newAttachment.removeClass("d-none");
                    newAttachment.attr('id', new Date().getTime());
                    newAttachment.data("fileContent", file);
                    newAttachment.find(".text").text(file.name);
                    
                    attachmentList.append(newAttachment);
                }
                this.value = "";
                startUploadQueue();
            }); // file change






            function startUploadQueue() {
                if (attachmentList.find("> li.inprogress:not(.d-none)").length > 0) { return;}
                var waitingAttachments = attachmentList.find("> li.waiting:not(.d-none)");
                if (waitingAttachments.length == 0) { return; }

                var firstWaitingAttachment = waitingAttachments.first();
                uploadFileToServer(firstWaitingAttachment);
            }// startUploadQueue





            function updateAttachment_FileIdsList_Input() {
                var result = "";
                attachmentList.find("> li.completed:not(.d-none)").each(function () {
                    var liAttach = $(this);
                    result += liAttach.attr('fileId') + ",";
                    
                });
                attachmentsIDsListInput.attr("value", result);

            }







            

            function uploadFileToServer(attachment) {

                var newInprogressAttachment = attachmentTemplate_inprogress.clone();
                newInprogressAttachment.data("fileContent", attachment.data("fileContent"));
                newInprogressAttachment.attr('id', attachment.attr("id"));
                newInprogressAttachment.attr('fileId', attachment.attr("fileId"));
                newInprogressAttachment.data('endByte', attachment.data("endByte"));
                newInprogressAttachment.find(".text").text(attachment.find(".text").text());
                

                newInprogressAttachment.removeClass("d-none");
                attachment.replaceWith(newInprogressAttachment);

                var file = newInprogressAttachment.data("fileContent");
                if (newInprogressAttachment.attr("fileId") == "" ||
                    newInprogressAttachment.attr("fileId") == null ||
                    newInprogressAttachment.attr("fileId") == undefined) {
                    $.ajax({
                        url: "@Model.GetUniqueUploadName" + "?fileName=" + file.name+"&FormId=@Model.FormId&Mac=@Model.Mac" ,
                        cache: false,
                        contentType: false,
                        processData: false,
                        method: 'Get',
                        type: 'Get', // For jQuery < 1.9
                        success: function (data) {
                            newInprogressAttachment.attr("fileId", data);
                            newInprogressAttachment.data("endByte", 0);
                            requestByteToEnd(file, file.size, newInprogressAttachment);
                        },
                        error: function (xhr, status, error) {
                            var newFailedAttachment = attachmentTemplate_failed.clone();
                            newFailedAttachment.data("fileContent", newInprogressAttachment.data("fileContent"));
                            newFailedAttachment.attr('id', newInprogressAttachment.attr("id"));
                            newFailedAttachment.data('endByte', newInprogressAttachment.data("endByte"));
                            newFailedAttachment.find(".text").text(newInprogressAttachment.find(".text").text());
                            
                            newFailedAttachment.removeClass("d-none");
                            newFailedAttachment.find("> i.fa-redo-alt").click(function () {
                                uploadFileToServer(newFailedAttachment);
                            });
                            newInprogressAttachment.replaceWith(newFailedAttachment);
                            startUploadQueue();
                        }
                    });
                }
                else
                    requestByteToEnd(file, file.size, newInprogressAttachment);;


                var step = 1;
                function requestByteToEnd(file, lastByte, attachment) {
                    
                    var byte = attachment.data("endByte");
                    if (!Number.isInteger(byte))
                        byte = 0;

                    var endByte = byte + 500000;
                    if (endByte > lastByte)
                        endByte = lastByte;

                    var _blob = file.slice(byte, endByte);
                    var myFormData = new FormData();
                    myFormData.append('files', _blob); //myFormData.append('file-0', _blob);
                    
                    $.ajax({
                        url: "@Model.UploadAction" + "?fileName=" + attachment.attr("fileId") +"&FormId=@Model.FormId&Mac=@Model.Mac",
                        data: myFormData,
                        cache: false,
                        contentType: false,
                        processData: false,
                        method: 'POST',
                        type: 'POST', // For jQuery < 1.9
                        success: function (data) {
                            attachment.data("endByte", endByte);
                            
                            //update progress
                            var prograss = ((100 * endByte) / lastByte).toFixed(0).toString();
                            attachment.find(".progress-bar").css("width", prograss+'%');
                            
                            if (endByte < lastByte)
                                requestByteToEnd(file, lastByte, attachment);
                            else {
                                //change to complated
                                var newCompletedAttachment = attachmentTemplate_completed.clone();
                                newCompletedAttachment.attr('id', attachment.attr("id"));
                                newCompletedAttachment.attr('fileId', attachment.attr("fileId"));
                                newCompletedAttachment.find(".text").text(attachment.find(".text").text());
                                newCompletedAttachment.removeClass("d-none");
                                attachment.replaceWith(newCompletedAttachment);

                                // add id to ids list 
                                updateAttachment_FileIdsList_Input();
                                
                                startUploadQueue();
                            }
                        },
                        error: function (xhr, status, error) {
                            // change to failded
                            var newFaildAttachment = attachmentTemplate_failed.clone();
                            newFaildAttachment.attr('id', attachment.attr("id"));
                            newFaildAttachment.attr('fileId', attachment.attr("fileId"));
                            newFaildAttachment.data('endByte', attachment.data("endByte"));
                            newFaildAttachment.data("fileContent", attachment.data("fileContent"));
                            newFaildAttachment.find(".text").text(attachment.find(".text").text());
                            newFaildAttachment.find("> i.fa-redo-alt").click(function () {
                                uploadFileToServer(newFaildAttachment);
                            });
                            
                            newFaildAttachment.removeClass("d-none");
                            attachment.replaceWith(newFaildAttachment);

                            startUploadQueue();
                        }
                    });

                }//end of requestByteToEnd


            };

        };
    }); // document ready

</script>
