using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Authorization;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.FileProviders;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using ProjectSupport.Core.Models;
using ProjectSupport.Infrastructure;
using ProjectSupport.Infrastructure.Data;
using Pentest_Report_Manager.Services;
using Pentest_Report_Manager.Services.Filters;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.CodeAnalysis;

namespace Pentest_Report_Manager
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }






        // to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.Configure<CookiePolicyOptions>(options =>
            {
                // This lambda determines whether user consent for non-essential cookies is needed for a given request.
                options.CheckConsentNeeded = context => false;
                options.MinimumSameSitePolicy = SameSiteMode.None;
            });


            services.AddHttpContextAccessor();
            services.AddSingleton<IFileProvider>(
            new PhysicalFileProvider(
                Path.Combine(Directory.GetCurrentDirectory(), "wwwroot" /*"wwwroot"*/)));


            services.AddDbContext<ProjectSupportDB>();


            services.AddIdentity<ApplicationUser, ApplicationRole>(
                options => options.Stores.MaxLengthForKeys = 128)
                .AddEntityFrameworkStores<ProjectSupportDB>()
                .AddDefaultUI()
                .AddDefaultTokenProviders();



            services.ConfigureApplicationCookie(options =>
            {
                options.AccessDeniedPath = new PathString("/Account/AccessDenied");
                options.Cookie.Name = "Authentication";
                options.Cookie.HttpOnly = true;
                options.Cookie.SecurePolicy = CookieSecurePolicy.None;
                options.ExpireTimeSpan = TimeSpan.FromMinutes(720);
                options.LoginPath = new PathString("/Identity/Account/Login");
                options.ReturnUrlParameter = CookieAuthenticationDefaults.ReturnUrlParameter;
                options.SlidingExpiration = true;

                options.AccessDeniedPath = "/Identity/Account/AccessDenied";
                options.SlidingExpiration = true;
                options.Cookie.Name = "Authentication";
            });

            services.AddSession(options => {
                options.IdleTimeout = TimeSpan.FromMinutes(20);
                options.Cookie.SecurePolicy = CookieSecurePolicy.None;
            });

            services.AddDistributedMemoryCache(); // Adds a default in-memory implementation of IDistributedCache
            services.AddMemoryCache();
            services.AddScoped<ICacheMemoryProvider, CacheMemoryProvider>();
            services.AddScoped<FormID_isRequired>();
            services.AddScoped<IMy_Service_Provider, My_Service_Provider>();




            services.AddMvc(o =>
            {
                o.EnableEndpointRouting = false;        // this is added recently
                //Apply Authorization by default 
                var policy = new AuthorizationPolicyBuilder()
                    .RequireAuthenticatedUser()
                    .Build();
                o.Filters.Add(new AuthorizeFilter(policy));

                // too apply Different authorization (policies) in different parts, use: https://joonasw.net/view/apply-authz-by-default



            }).SetCompatibilityVersion(CompatibilityVersion.Version_2_2); //CompatibilityVersion.Latest


            //services.AddTransient<IEmailService, DemoEmailService>();
            //services.AddTransient<IRazorPartialToStringRenderer, RazorPartialToStringRenderer2>();

        }







        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app,
            IHostingEnvironment env,
            ILoggerFactory loggerFactory,
            IOptions<ApplicationSettings> applicationOptions,
            ProjectSupportDB db,
            RoleManager<ApplicationRole> roleManager,
            UserManager<ApplicationUser> userManager)
        {


            //if (env.IsDevelopment())
            //{
                app.UseDeveloperExceptionPage();
            
            //}
            //else
            //{
            //    app.UseExceptionHandler("/Home/Error");
            //    app.UseHsts();  // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
            //}


            /* a good order:
                    Exception/error handling
                    HTTP Strict Transport Security Protocol
                    HTTPS redirection
                    Static file server
                    Cookie policy enforcement
                    Authentication
                    Session
                    MVC
             */

            // goo article for manading these features: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/index?tabs=aspnetcore2x&view=aspnetcore-2.2

            app.UseHttpsRedirection();
            app.UseStaticFiles();
            app.UseCookiePolicy();
     app.UseAuthentication();
            app.UseSession();


            //app.UseMiddleware<MyRequestLoggerMiddleware>();
            //app.Map("/showErrorRequestsLog", ShowHeaders);

            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller=Projects}/{action=Index}/{id?}");
            });





            ////using (var serviceScope = app.ApplicationServices.GetService<IServiceScopeFactory>().CreateScope())
            ////{
            ////    var context = serviceScope.ServiceProvider.GetRequiredService<ProjectSupportDB>();
            ////    context.Database.Migrate();
            ////}
            //using (var serviceScope = app.ApplicationServices.GetService<IServiceScopeFactory>().CreateScope())
            //{
            //    var context = serviceScope.ServiceProvider.GetRequiredService<ProjectSupportDB>();
            //    context.Database.EnsureCreated();
            //}



            DummyData.InitializeDataRocors(db, userManager, roleManager).Wait();
           
        }





        private static void ShowHeaders(IApplicationBuilder app)
        {
            app.Run(async context => {
                var output = $"<h2>Unique request >Unique response headers</h2";
                context.Response.ContentType = "text/html";
                await context.Response.WriteAsync(output);
            });
        }
    }
}
