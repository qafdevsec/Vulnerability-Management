using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.Encodings.Web;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.Extensions.Logging;
using ProjectSupport.Core.Models;

namespace Pentest_Report_Manager.Areas.Identity.Pages.Account
{
    //[Authorize(Roles = "Admin, Developer")]
    public class RegisterModel : PageModel
    {
        private readonly SignInManager<ApplicationUser> _signInManager;
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly ILogger<RegisterModel> _logger;
        private readonly IEmailSender _emailSender;

        public RegisterModel(
            UserManager<ApplicationUser> userManager,
            SignInManager<ApplicationUser> signInManager,
            ILogger<RegisterModel> logger,
            IEmailSender emailSender)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _logger = logger;
            _emailSender = emailSender;
        }




        [BindProperty]
        public InputModel Input { get; set; }

        public string ReturnUrl { get; set; }

        public class InputModel
        {


            [Required]
            [Display(Name = "User Role")]
            public ProJectSupport_UserRoles UserRoles { get; set; }


            [Required]
            [Display(Name = "Full name")]
            public string FullName { get; set; }



            [Required]
            [Display(Name = "UserName")]
            public string UserName { get; set; }

            
            [EmailAddress]
            [Display(Name = "Email")]
            public string Email { get; set; }

            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
            [DataType(DataType.Password)]
            [Display(Name = "Password")]
            public string Password { get; set; }

            [DataType(DataType.Password)]
            [Display(Name = "Confirm password")]
            [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
            public string ConfirmPassword { get; set; }
        }

        public void OnGet(string returnUrl = null)
        {
            ReturnUrl = returnUrl;
        }

        
        public async Task<IActionResult> OnPostAsync(List<string> UserRoles, string returnUrl = null)
        {

            //ApplicationRole role = new ApplicationRole(ProJectSupport_UserRoles.Admin.ToString(), "this is the administrator role");
            //IdentityResult roleResult = roleManager.CreateAsync(role).Result;

            if (UserRoles == null || UserRoles.Count==0)
            {
                ModelState.AddModelError(string.Empty, "Pelease select User roles");
                return Page();
            }


            //if (UserRoles.Contains(ProJectSupport_UserRoles.Developer.ToString()) &&
            //   _userManager.Users.Include(u => u.UserRoles).ThenInclude(ur => ur.Role).SelectMany(u => u.UserRoles)
            //    .Any(ur => ur.Role.Name == ProJectSupport_UserRoles.Developer.ToString()))
            //{
            //    ModelState.AddModelError(string.Empty, "Only users with role 'Developer' can create new users that role 'Developer' is assigned to them.");
            //    return Page();
            //}

            returnUrl = returnUrl ?? Url.Content("~/");
            if (ModelState.IsValid)
            {
                if (_userManager.FindByNameAsync(Input.UserName).Result == null) { 
                    var user = new ApplicationUser {
                        FullName = Input.FullName,
                        UserName = Input.UserName,
                        Email = Input.Email
                    };

                    if (UserRoles.Contains(ProJectSupport_UserRoles.Admin.ToString()) ||
                        UserRoles.Contains(ProJectSupport_UserRoles.Pentester.ToString()) ||
                        UserRoles.Contains(ProJectSupport_UserRoles.ThirdPartyPentester.ToString()))
                        user.Pentester = new Pentester();

                    IdentityResult result;
                    try
                    {
                        result = _userManager.CreateAsync(user).Result;
                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }
                    

                    if (result.Succeeded)
                    {
                        _logger.LogInformation("User created a new account with password.");
                        _userManager.AddPasswordAsync(user, Input.Password).Wait();

                        foreach (string item in UserRoles)
                            if (Enum.GetNames(typeof(ProJectSupport_UserRoles))
                                                            .Any(f => f.ToLower() == item.ToLower()))
                                _userManager.AddToRoleAsync(user, item).Wait();
                    


                        //var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                        //var callbackUrl = Url.Page(
                        //    "/Account/ConfirmEmail",
                        //    pageHandler: null,
                        //    values: new { userId = user.Id, code = code },
                        //    protocol: Request.Scheme);

                        //await _emailSender.SendEmailAsync(Input.Email, "Confirm your email",
                        //    $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

                        if (!User.Identity.IsAuthenticated)
                            await _signInManager.SignInAsync(user, isPersistent: false);
                    
                        return LocalRedirect(returnUrl);
                    }
                    foreach (var error in result.Errors)
                    {
                        ModelState.AddModelError(string.Empty, error.Description);
                    }
                }
            }

            // If we got this far, something failed, redisplay form
            return Page();
        }
    }
}
