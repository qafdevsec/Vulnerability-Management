using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text.Encodings.Web;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.Extensions.Logging;
using Pentest_Report_Manager.Services;
using ProjectSupport.Core.Models;

namespace Pentest_Report_Manager.Areas.Identity.Pages.Account
{
    //[Authorize(Roles = "Admin, Developer")]
    public class EditModel : PageModel
    {
        private readonly SignInManager<ApplicationUser> _signInManager;
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly ILogger<RegisterModel> _logger;
        private readonly IEmailSender _emailSender;
        public IMy_Service_Provider serviceProvider { get; }
        
        public EditModel(
            IMy_Service_Provider _serviceProvider,
            UserManager<ApplicationUser> userManager,
            SignInManager<ApplicationUser> signInManager,
            ILogger<RegisterModel> logger,
            IEmailSender emailSender)
        {
            serviceProvider = _serviceProvider;
            _userManager = userManager;
            _signInManager = signInManager;
            _logger = logger;
            _emailSender = emailSender;
        }




        [BindProperty]
        public InputModel Input { get; set; }

        public string ReturnUrl { get; set; }

        public class InputModel
        {


            //[Required]
            [Display(Name = "User Role")]
            public ICollection<ApplicationUserRole> UserRoles { get; set; }


            [Required]
            [Display(Name = "Full name")]
            public string FullName { get; set; }



            [Required]
            [Display(Name = "UserName")]
            public string UserName { get; set; }

            
            [EmailAddress]
            [Display(Name = "Email")]
            public string Email { get; set; }

        }

        public IActionResult OnGet(string userName, string returnUrl = null)
        {
            ReturnUrl = returnUrl;

            var user = _userManager.Users
                .Include(u => u.UserRoles).ThenInclude(ur => ur.Role)
                .FirstOrDefault(u => u.UserName == userName);

            if (user == null)
                return RedirectToPage("/Settings/userslist");

            Input = new InputModel()
            {
                Email = user.Email,
                FullName = user.FullName,
                UserName = user.UserName,
                UserRoles = user.UserRoles
            };

            return Page();

        }

        public async Task<IActionResult> OnPostAsync(List<string> UserRoles, string userName, string returnUrl = null)
        {

            if (UserRoles == null || UserRoles.Count==0)
            {
                ModelState.AddModelError(string.Empty, "Pelease select User roles");
                return Page();
            }

            returnUrl = returnUrl ?? Url.Content("~/settings/UsersList");
            if (!ModelState.IsValid)
            {
                var errors = ModelState.Select(x => x.Value.Errors)
                           .Where(y => y.Count > 0)
                           .ToList();
                return Page();
            }
            var oldUser = serviceProvider.projectSupportDB.Users
                .Include(u => u.UserRoles).ThenInclude(ur=> ur.Role)
                .FirstOrDefault(u => u.UserName == userName);
            var newUser = serviceProvider.projectSupportDB.Users.FirstOrDefault(u => u.UserName == Input.UserName);

            if (oldUser == null)
            {
                ModelState.AddModelError(string.Empty, "Please enter a valid username");
                return Page();
            }
            else if (userName != Input.UserName && newUser != null) {
                ModelState.AddModelError(string.Empty, "Please enter a unique new UserName.");
                return Page();
            }
            bool wasDeveloper = oldUser.UserRoles.Any(ur => ur.Role.Name == ProJectSupport_UserRoles.Developer.ToString());

            if (UserRoles.Contains(ProJectSupport_UserRoles.Admin.ToString()) &&
                !(User.IsInRole(ProJectSupport_UserRoles.Admin.ToString()) || User.IsInRole(ProJectSupport_UserRoles.Developer.ToString())))
            {
                ModelState.AddModelError(string.Empty, "Admin role can only assigned by Admin users.");
                return Page();
            }
            if (UserRoles.Contains(ProJectSupport_UserRoles.Developer.ToString()) &&
                !wasDeveloper && !User.IsInRole(ProJectSupport_UserRoles.Developer.ToString()) )
            {
                ModelState.AddModelError(string.Empty, "Developer role can only assigned by Developer users.");
                return Page();
            }


            oldUser.FullName = Input.FullName;
            oldUser.UserName = Input.UserName;
            oldUser.Email = Input.Email;
            oldUser.UserRoles.Clear();

            foreach (string item in UserRoles)
                if (Enum.GetNames(typeof(ProJectSupport_UserRoles))
                                                .Any(f => f.ToLower() == item.ToLower()))
                    //_userManager.AddToRoleAsync(oldUser, item).Wait();
                    oldUser.UserRoles.Add(new ApplicationUserRole()
                    {
                        Role = new ApplicationRole() { Name = item }
                    });

            if (wasDeveloper && !UserRoles.Contains(ProJectSupport_UserRoles.Developer.ToString()))
                _userManager.AddToRoleAsync(oldUser, ProJectSupport_UserRoles.Developer.ToString()).Wait();



            try
            {
                serviceProvider.projectSupportDB.SaveChanges();
            }
            catch (Exception ex)
            {
                ModelState.AddModelError(string.Empty, "The task caused an error. Please contact to the support.");
                return Page();
            }
                    
            _logger.LogInformation("User "+ userName+" is updated to user "+ userName + ".");
            return LocalRedirect(returnUrl);

        }
    }
}
