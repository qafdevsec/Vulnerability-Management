using BlogPortal.Core.BussinessTemplatesModel.BlogPost;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Pentest_Report_Manager.Services;

namespace Pentest_Report_Manager.Models
{
    public class AttachmentUploadObject
    {
        public AttachmentUploadObject() { }

        public AttachmentUploadObject(dynamic _service_Provider)
        {
            InitiateFields(_service_Provider);
        }



        public void InitiateFields(dynamic _service_Provider)
        {
            IMy_Service_Provider service_Provider = (IMy_Service_Provider)_service_Provider;
            bool isGet = service_Provider.httpContext.Request.Method.ToUpper() == "GET";


            FormId = service_Provider.httpContext.Request.Query["FormId"];
            if (string.IsNullOrEmpty(FormId) && !isGet)
                try
                {
                    FormId = service_Provider.httpContext.Request.Form != null ? service_Provider.httpContext.Request.Form["FormId"].ToString() : "";
                }
                catch (Exception) { }

            FormId = FormId ?? "";

            Mac = service_Provider.httpContext.Request.Query["Mac"];
            if (string.IsNullOrEmpty(Mac) && !isGet)
                try
                {
                    Mac = service_Provider.httpContext.Request.Form != null ? service_Provider.httpContext.Request.Form["Mac"].ToString() : "";
                }
                catch (Exception) { }

            Mac = Mac ?? "";


        }






        public string GetUniqueUploadName { get; set; } = @"/Attachment/GetUniqueUploadName"; // "?fileName=''"
        public string GetFileWebRootFullPath { get; set; } = @"/Attachment/GetFileWebRootFullPath";


        public string UploadAction { get; set; } = @"/Attachment/UploadAttachment";     // "?fileName=''"
                                                                                        //UploadAction = @"/projects/Upload" // "?fileName=''"
        public string DownloadAction { get; set; } = @"/Attachment/Download/";
        public string DeleteAction { get; set; } = @"/Attachment/Delete/";
        public bool ShowTitle { get; set; } = true;
        public IEnumerable<Attachment> Attachments { get; set; }
        private Attachment _Attachment = null;
        public Attachment Attachment
        {
            get { return _Attachment; }
            set
            {
                List<Attachment> _Attachments = new List<Attachment>();
                if (value != null)
                    _Attachments.Add(value);
                Attachments = _Attachments;
            }
        }

        public string ParagraphTitle { get; set; } = "Attachments";
        public string AttachmentsIDs_FieldName { get; set; } = "attachmentsIDsList";

        public string FormId { get; set; }
        public string Mac { get; set; }
        public bool IsReadOnly { get; set; }
        public bool IsMultiple { get; set; } = true;
        public bool Do_not_insert_formId_and_Mac_inputs { get; set; } = false;
    }



}
