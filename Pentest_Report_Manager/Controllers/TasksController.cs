using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using BlogPortal.Core.BussinessTemplatesModel.BlogPost;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using ProjectSupport.Core.Models;
using ProjectSupport.Infrastructure;
using Pentest_Report_Manager.Classes;
using static Pentest_Report_Manager.Controllers.AttachmentController;
using Pentest_Report_Manager.Services;
using Pentest_Report_Manager.Services.Filters;
using System.Globalization;
using Microsoft.CodeAnalysis;

namespace Pentest_Report_Manager.Controllers
{
    [Authorize(Roles = "Admin, Pentester, Developer")]
    public class TasksController : Controller
    {
        private readonly ProjectSupportDB _dbContext;
        public UserManager<ApplicationUser> userManager { get; }
        public IHostingEnvironment HostingEnvironment { get; }
        public ICacheMemoryProvider cacheMemoryProvider { get; }
        public IMy_Service_Provider serviceProvider { get; }
        public TasksController(ProjectSupportDB context,
            UserManager<ApplicationUser> userManager,
            IHostingEnvironment hostingEnvironment,
            ICacheMemoryProvider _cacheMemoryProvider,
            IMy_Service_Provider _serviceProvider)
        {
            _dbContext = context;
            this.userManager = userManager;
            HostingEnvironment = hostingEnvironment;
            cacheMemoryProvider = _cacheMemoryProvider;
            serviceProvider = _serviceProvider;
        }





        [HttpGet, Route("Pentests")]
        public async Task<IActionResult> Index()
        {
            HttpContext.Items["controller"] = this; // as Controller;

            var jobtasks = await _dbContext.JobTasks
                .Where(t => t.IsDeleted != true && t.Project.IsDeleted != true)
                 .Include(t => t.TaskResponse_to_getVulnerabilitiesCount)
                .OrderByDescending(t => t.ID)
                .ToListAsync();

            List<JobTask> ll = jobtasks;

            foreach (var task in ll)
                task.LoadRelatedData(_dbContext);

            return View(jobtasks);
        }





        public async Task<IActionResult> Summary(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var jobtask = GetSummaryObject(id);
            if (jobtask == null)
            {
                return NotFound();
            }

            return View(jobtask);
        }





        [NonAction]
        public async Task<JobTask> GetSummaryObject(int? id)
        {
            if (id == null)
            {
                return null;
            }

            var jobtask = _dbContext.JobTasks
                .FirstOrDefault(t => t.ID == id && t.IsDeleted != true && t.Project.IsDeleted != true);

            if (jobtask == null)
            {
                return null;
            }
            jobtask.LoadRelatedData(_dbContext);

            return jobtask;
        }







        [HttpGet, Route("Projects/{projectId:int:min(0)}/tasks/{taskId:int:min(0)}")]
        public async Task<IActionResult> Details(int taskId)
        {
            ViewBag.sp = serviceProvider;
            ViewBag.controller = this;

            var jobtask = _dbContext.JobTasks
                .Include(jt => jt.Attachments)
                .Include(jt => jt.Project)
                .Include(jt => jt.Pentesters).ThenInclude(p => p.Pentester).ThenInclude(p => p.ApplicationUser)
                .Include(jt => jt.TaskResponses)
                .Include(jt => jt.TaskResponses).ThenInclude(t => t.Vulnerablities_Titles)
                .Include(jt => jt.TaskResponses).ThenInclude(t => t.Attachments)
                //.Include(jt=>jt.TaskResponses).ThenInclude(t => t.Comments)
                .Include(jt => jt.TaskResponses).ThenInclude(t => t.Submitter_ApplicationUser)
                .Include(jt => jt.TaskResponses).ThenInclude(t => t.ReportFileAndPDF)
                .Include(jt => jt.TaskResponses).ThenInclude(t => t.ReportFileAndPDF).ThenInclude(t => t.DocFile)
                .Include(jt => jt.TaskResponses).ThenInclude(t => t.ReportFileAndPDF).ThenInclude(t => t.PdfFile)
                .FirstOrDefault(t => t.ID == taskId);
            if (jobtask == null)
                return NotFound();

            return View(jobtask);
        }





        [HttpGet, Route("projects/{projectId:int:min(0)}/tasks/create")]
        [ServiceFilter(typeof(FormID_isRequired))]
        public IActionResult Create(int projectId)
        {
            ViewBag.sp = serviceProvider;


            var project = _dbContext.Projects.FirstOrDefault(p => p.ID == projectId);
            if (project == null)
                return NotFound();



            var newTask = new JobTask() { Project_Ref= projectId, Project=project};
            newTask.Attachments = cacheMemoryProvider.GetCurrentFormAttachments<JobTask>().ToList();
            

            ViewData["Pentesters"] = new SelectList(
                _dbContext.Pentesters.Where(p => !p.IsDeleted && !p.ApplicationUser.IsDeleted)
                .Select(p=> new
                {
                    fullName = p.ApplicationUser.FullName,
                    pentesterId= p.ID
                })
                , "pentesterId", "fullName");

            return View(newTask);
        }





        [HttpPost, Route("projects/{projectId:int:min(0)}/tasks/create")]
        [ValidateAntiForgeryToken]
        [ServiceFilter(typeof(FormID_isRequired))]
        public async Task<IActionResult> Create(List<int> Pentesters,JobTask jobTask)
        {
            ViewBag.sp = serviceProvider;

            if (!_dbContext.Projects.Any(e => e.ID == jobTask.Project_Ref))
                return NotFound();



            if (ModelState.IsValid)
            {
                string userId = User.FindFirst(ClaimTypes.NameIdentifier).Value;
                int user_id;
                if (!int.TryParse(userId, out user_id))
                    return NotFound();
                ApplicationUser applicationUser = await userManager.GetUserAsync(this.User);    //ApplicationUser applicationUser = Task.Run(async () => { return await userManager.GetUserAsync(this.User); }).Result;
                if (applicationUser == null)    //this.User.IsInRole("Admin, Pentester");
                    return NotFound();


                using (var transaction = _dbContext.Database.BeginTransaction())
                {
                    try
                    {
                        var newTask = new JobTask()
                        {
                            Submitter_Pentester_Ref = user_id,
                            Project_Ref = jobTask.Project_Ref,
                            DeadlineDays = jobTask.DeadlineDays,
                            PentestType = jobTask.PentestType,
                            PeriodNameForThirdParties = jobTask.PeriodNameForThirdParties,
                            Status = jobTask.Status,
                            Title = jobTask.Title,
                            Description = jobTask.Description
                        };

                        // manage pentesters
                        foreach (var pent in Pentesters)
                        {
                            var originalPent = _dbContext.Pentesters.Where(p => !p.IsDeleted && !p.ApplicationUser.IsDeleted)
                                .FirstOrDefault(p => p.ID == pent);
                            if (originalPent != null)
                                newTask.Pentesters.Add(new JobTask_Pentester() { Pentester = originalPent });
                        }




                        //add attachments
                        cacheMemoryProvider.UpdateAttachmentsList<JobTask>(newTask.Attachments);

                        newTask.RefereshTagList(serviceProvider.projectSupportDB);
                        _dbContext.Add(newTask);
                        await _dbContext.SaveChangesAsync();

                        transaction.Commit();
                        //success:
                        return Redirect("~/projects/"+newTask.Project_Ref+"/Tasks/" + newTask.ID);
                    }
                    catch (Exception ee)
                    {
                        return RedirectToAction(
                            nameof(ErrorController.Couse),
                            nameof(ErrorController), new { errorLog = (new ErrorLog() { ProgrammerMessage = "The process of adding a new project is fails." }) });
                    }
                }
            }


            // fail of modelState
            jobTask.Attachments = cacheMemoryProvider.GetCurrentFormAttachments<JobTask>().ToList();

            jobTask.Project = _dbContext.Projects.FirstOrDefault(p => p.ID == jobTask.Project_Ref);

            ViewData["Pentesters"] = new SelectList(
                _dbContext.Pentesters.Where(p => !p.IsDeleted && !p.ApplicationUser.IsDeleted)
                .Select(p => new
                {
                    fullName = p.ApplicationUser.FullName,
                    pentesterId = p.ID
                })
                , "pentesterId", "fullName");

            return View(jobTask);
        }





        [HttpGet, Route("Projects/{projectId:int:min(0)}/tasks/{taskId:int:min(0)}/edit")]
        [ServiceFilter(typeof(FormID_isRequired))]
        public async Task<IActionResult> Edit(int taskId)
        {
            ViewBag.sp = serviceProvider;

            var originalTask = await _dbContext.JobTasks
                            .Include(p => p.Attachments)
                            .Include(p => p.Pentesters)
                            .FirstOrDefaultAsync(m => m.ID == taskId);
            if (originalTask == null)
                return NotFound();

            originalTask.Attachments = cacheMemoryProvider.GetCurrentFormAttachments<JobTask>(originalTask.Attachments).ToList();

            ViewBag.Pentesters = _dbContext.Pentesters
                .Where(p => !p.IsDeleted && !p.ApplicationUser.IsDeleted)
                .Include(i => i.ApplicationUser).ToList();


            return View(originalTask);
        }





        [HttpPost, Route("Projects/{projectId:int:min(0)}/tasks/{taskId:int:min(0)}/edit")]
        [ValidateAntiForgeryToken]
        [ServiceFilter(typeof(FormID_isRequired))]
        public async Task<IActionResult> Edit(int taskId, List<int> Pentesters, JobTask jobTask)
        {
            ViewBag.sp = serviceProvider;

            if (ModelState.IsValid)
            {
                string userId = User.FindFirst(ClaimTypes.NameIdentifier).Value;
                int user_id;
                if (!int.TryParse(userId, out user_id))
                    return NotFound();
                ApplicationUser applicationUser = await userManager.GetUserAsync(this.User);    //ApplicationUser applicationUser = Task.Run(async () => { return await userManager.GetUserAsync(this.User); }).Result;
                if (applicationUser == null)    //this.User.IsInRole("Admin, Pentester");
                    return NotFound();


                using (var transaction = _dbContext.Database.BeginTransaction())
                {
                    try
                    {

                        var originalTask = await _dbContext.JobTasks
                            .Where(p => p.ID == taskId && p.IsDeleted != true)
                            .Include(p => p.Attachments)
                            .Include(p => p.Pentesters)
                            .Include(p => p.Tags)
                            .FirstOrDefaultAsync(m => m.ID == taskId);
                        if (originalTask == null)
                            return NotFound();


                        originalTask.DeadlineDays = jobTask.DeadlineDays;
                        originalTask.Description = jobTask.Description;
                        originalTask.ExternalRequesterDetails = jobTask.ExternalRequesterDetails;
                        originalTask.Last_Modification_DateTime = DateTime.Now;
                        originalTask.PentestType = jobTask.PentestType;
                        originalTask.PeriodNameForThirdParties = jobTask.PeriodNameForThirdParties;
                        originalTask.Status = jobTask.Status;
                        originalTask.Title = jobTask.Title;
                        originalTask.Description = originalTask.Description;


                        //mannage attachments
                        cacheMemoryProvider.UpdateAttachmentsList<JobTask>(originalTask.Attachments);


                        // manage pentesters
                        originalTask.Pentesters.Clear();
                        foreach (var pent in Pentesters)
                        {
                            var originalPent = _dbContext.Pentesters.Where(p => !p.IsDeleted && !p.ApplicationUser.IsDeleted)
                                .FirstOrDefault(p => p.ID == pent);
                            if (originalPent != null)
                                originalTask.Pentesters.Add(new JobTask_Pentester() { Pentester = originalPent });
                        }


                        originalTask.RefereshTagList(serviceProvider.projectSupportDB);
                        _dbContext.Update(originalTask);
                        await _dbContext.SaveChangesAsync();

                        transaction.Commit();
                        //success:
                        return Redirect("~/projects/" + originalTask.Project_Ref + "/Tasks/" + originalTask.ID);
                    }
                    catch (Exception ee)
                    {
                        return RedirectToAction(
                            nameof(ErrorController.Couse),
                            nameof(ErrorController), new { errorLog = (new ErrorLog() { ProgrammerMessage = "The process of adding a new project is fails." }) });
                    }
                }
            }


            // fail of modelState
            var origTask = await _dbContext.JobTasks
                            .Where(p => p.ID == taskId && p.IsDeleted != true)
                            .Include(p => p.Attachments)
                            .FirstOrDefaultAsync(m => m.ID == taskId);
            if (origTask == null)
                return NotFound();

            ViewBag.Pentesters = _dbContext.Pentesters
                .Where(p => !p.IsDeleted && !p.ApplicationUser.IsDeleted)
                .Include(i => i.ApplicationUser).ToList();


            jobTask.Attachments = cacheMemoryProvider.GetCurrentFormAttachments<JobTask>(origTask.Attachments).ToList();

            return View(jobTask);
        }







        [HttpGet, Route("Projects/{projectId:int:min(0)}/tasks/{taskId:int:min(0)}/delete")]
        public async Task<IActionResult> Delete(int taskId)
        {
            var task = serviceProvider.projectSupportDB.JobTasks
                .FirstOrDefault(m => m.ID == taskId);
            if (task == null)
                return NotFound();

            return View(task);
        }


        [HttpPost, Route("Projects/{projectId:int:min(0)}/tasks/{taskId:int:min(0)}/delete"), ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int taskId)
        {
            var jobTask = await Delete(taskId, _dbContext);
            if (jobTask == null)
                return NotFound();
            return Redirect("~/Projects/" + jobTask.Project_Ref);
        }



        public static async Task<JobTask> Delete(int jobTaskID, ProjectSupportDB db, bool autoSaveDb = true)
        {
            var task= db.JobTasks
                .Include(t => t.Attachments)
                .Include(t => t.Comments)
                .Include(t => t.Pentesters)
                .Include(t => t.SentLetters)
                .Include(t => t.Tags)
                .Include(t => t.TaskResponses)
                .Include(t => t.TaskResponse_to_getVulnerabilitiesCount)
                .FirstOrDefault(m => m.ID == jobTaskID);
            if (task == null)
                return null;

            return await Delete(task, db, true);
        }
        


        public static async Task<JobTask> Delete(JobTask task, ProjectSupportDB db, bool autoSaveDb = true)
        {
            if (!db.Entry(task).Collection(t => t.Attachments).IsLoaded)
            {
                db.Entry(task).Collection(t => t.Attachments).Load();
                db.Entry(task).Collection(t => t.Comments).Load();
                db.Entry(task).Collection(t => t.Pentesters).Load();
                db.Entry(task).Collection(t => t.SentLetters).Load();
                db.Entry(task).Collection(t => t.Tags).Load();
                db.Entry(task).Collection(t => t.TaskResponses).Load();
                db.Entry(task).Reference(t => t.TaskResponse_to_getVulnerabilitiesCount).Load();
            }
             
            AttachmentController.Delete<Attachment<JobTask>>(task.Attachments, db);
            db.RemoveRange(task.Comments);
            db.RemoveRange(task.Tags);
            db.RemoveRange(task.Pentesters);
            foreach (var letter in task.SentLetters)
            {
                AttachmentController.Delete<Attachment<SentLetter>>(letter.Attachments, db, false);
                db.Remove(letter);
            }
            await ResponsesController.Delete(task.TaskResponses, db, false);
            db.Entry(task).State=EntityState.Deleted;
            if (autoSaveDb)
                await db.SaveChangesAsync();
            return task;
        }



        public static async Task<ICollection<JobTask>> Delete
            (ICollection<JobTask> tasks, ProjectSupportDB db, bool autoSaveDb = true)
        {
            if (tasks == null)
                return null;
            var _tasks = tasks.ToList();
            for (int i = 0; i < tasks.Count; i++)
                await Delete(_tasks[i], db, false);
            if (autoSaveDb)
                await db.SaveChangesAsync();
            return tasks;
        }



    }
}
