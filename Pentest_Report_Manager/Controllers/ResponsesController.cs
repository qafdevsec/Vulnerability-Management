using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Security.Claims;
using System.Threading.Tasks;
using System.Web;
using BlogPortal.Core.BussinessTemplatesModel.BlogPost;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding;
//using Microsoft.AspNetCore.Mvc.ViewFeatures.Internal;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.VisualBasic;
using Pentest_Report_Manager.Classes;
using Pentest_Report_Manager.Services;
using Pentest_Report_Manager.Services.Filters;
using ProjectSupport.Core.Models;
using ProjectSupport.Infrastructure;

namespace Pentest_Report_Manager.Controllers
{
    public class ResponsesController : Controller
    {
        public IMy_Service_Provider serviceProvider { get; }
        public ResponsesController(IMy_Service_Provider _serviceProvider)
        {
            serviceProvider = _serviceProvider;
        }




        [HttpGet, Route("Projects/{projectId:int:min(0)}/tasks/{taskId:int:min(0)}/Responses/{responseId:int:min(0)}")]
        [ServiceFilter(typeof(FormID_isRequired))]
        public IActionResult Create(int projectId, int taskId,int responseId)
        {
            ViewBag.sp = serviceProvider;
            ViewBag.projectId = projectId;
            var jobtask = serviceProvider.projectSupportDB.JobTasks
                .FirstOrDefault(j => j.ID == taskId && !j.IsDeleted && !j.Project.IsDeleted);
            if (jobtask == null)
                return NotFound();
            if(string.IsNullOrEmpty(jobtask.ReportNumber))
                return Redirect("~/Projects/"+jobtask.Project_Ref+"/tasks/"+taskId+"/initiateDocNumber");


            var taskResponse = serviceProvider.projectSupportDB.TaskResponses
                .Include(tr=>tr.Attachments)
                .Include(tr=>tr.ReportFileAndPDF).ThenInclude(rf=> rf.DocFile)
                .Include(tr=>tr.ReportFileAndPDF).ThenInclude(rf=> rf.PdfFile)
                .Include(tr=>tr.Vulnerablities_Titles)
               .FirstOrDefault(j => j.ID == responseId && !j.IsDeleted);

            ViewBag.isEdit = true;
            if (taskResponse == null)
            {
                ViewBag.isEdit = false;
                taskResponse = new TaskResponse() { JobTask_Ref = taskId, JobTask = jobtask };
            }


            // get current doc attachment file
            taskResponse.ReportFileAndPDF.DocFile = serviceProvider.cacheMemoryProvider
                .GetCurrentFormAttachment<Attachment_with_two_Relations<ReportFileAndPDF>>
                (taskResponse.ReportFileAndPDF.DocFile, AttachmentsIDs_FieldName: "docFileName");

            // get current pdf attachment file
            taskResponse.ReportFileAndPDF.PdfFile = serviceProvider.cacheMemoryProvider
                .GetCurrentFormAttachment<Attachment_with_two_Relations<ReportFileAndPDF>>
                (taskResponse.ReportFileAndPDF.PdfFile, AttachmentsIDs_FieldName: "pdfFileName");

            // get current attachments list
            taskResponse.Attachments = serviceProvider.cacheMemoryProvider
                .GetCurrentFormAttachments<TaskResponse>(taskResponse.Attachments, AttachmentsIDs_FieldName: "allAttachments").ToList();

            ViewBag.hv = string.Join(Environment.NewLine,
                taskResponse.Vulnerablities_Titles.Where(v => v.Label == "H").Select(x => x.Text).ToArray());
            ViewBag.mv = string.Join(Environment.NewLine,
                taskResponse.Vulnerablities_Titles.Where(v => v.Label == "M").Select(x => x.Text).ToArray());
            ViewBag.lv = string.Join(Environment.NewLine,
                taskResponse.Vulnerablities_Titles.Where(v => v.Label == "L").Select(x => x.Text).ToArray());


            return View(taskResponse);
        }





        [HttpPost, Route("Projects/{projectId:int:min(0)}/tasks/{taskId:int:min(0)}/Responses/{responseId:int:min(0)}")]
        [ValidateAntiForgeryToken]
        [ServiceFilter(typeof(FormID_isRequired))]
        public async Task<IActionResult> Create( TaskResponse taskResponse, 
            string highVulnerabilities, string mediumVulnerabilities, string lowVulnerabilities)
        {

            ViewBag.sp = serviceProvider;

            ApplicationUser applicationUser = serviceProvider.projectSupportDB.Users.FirstOrDefault(u => u.UserName == this.User.Identity.Name);    //ApplicationUser applicationUser = Task.Run(async () => { return await userManager.GetUserAsync(this.User); }).Result;
            if (applicationUser == null) return NotFound();
            var jobtask = serviceProvider.projectSupportDB.JobTasks
                .FirstOrDefault(j => j.ID == taskResponse.JobTask_Ref );
            if (jobtask == null) return NotFound();
            if (string.IsNullOrEmpty(jobtask.ReportNumber))
                return Redirect("~/Projects/" + jobtask.Project_Ref + "/tasks/" + taskResponse.JobTask_Ref + "/initiateDocNumber");

            ViewBag.isEdit = false;
            TaskResponse originalResponse =null;
            if (taskResponse.ID > 0) {
                ViewBag.isEdit = true;
                originalResponse = serviceProvider.projectSupportDB.TaskResponses
               .Include(tr => tr.Attachments)
               .Include(tr => tr.ReportFileAndPDF).ThenInclude(rf => rf.DocFile)
               .Include(tr => tr.ReportFileAndPDF).ThenInclude(rf => rf.PdfFile)
               .Include(tr => tr.Tags)
               .Include(tr => tr.Vulnerablities_Titles)
              .FirstOrDefault(tr => tr.ID == taskResponse.ID);
                if (taskResponse== null) return NotFound();
            }
            else
                taskResponse.JobTask = jobtask;
            
            var taskresponseBoth = originalResponse == null ? taskResponse : originalResponse;
            highVulnerabilities = highVulnerabilities ?? "";
            mediumVulnerabilities = mediumVulnerabilities ?? "";
            lowVulnerabilities = lowVulnerabilities ?? "";

            if (string.IsNullOrEmpty(taskresponseBoth.Title))
            {
                ModelState.AddModelError("Title", "ورد اطلاعات برای فیلد Title ضروریست");
                //IEnumerable<ModelError> allErrors = ModelState.Values.SelectMany(v => v.Errors);

                ViewBag.hv = highVulnerabilities;
                ViewBag.mv = mediumVulnerabilities;
                ViewBag.lv = lowVulnerabilities;

                // get current doc attachment file
                taskresponseBoth.ReportFileAndPDF.DocFile = serviceProvider.cacheMemoryProvider
                    .GetCurrentFormAttachment<Attachment_with_two_Relations<ReportFileAndPDF>>
                    (taskresponseBoth.ReportFileAndPDF.DocFile,
                    AttachmentsIDs_FieldName: "docFileName");

                // get current pdf attachment file
                taskresponseBoth.ReportFileAndPDF.PdfFile = serviceProvider.cacheMemoryProvider
                    .GetCurrentFormAttachment<Attachment_with_two_Relations<ReportFileAndPDF>>
                    (taskresponseBoth.ReportFileAndPDF.PdfFile,
                    AttachmentsIDs_FieldName: "pdfFileName");


                // get current attachments list
                taskresponseBoth.Attachments = serviceProvider.cacheMemoryProvider
                    .GetCurrentFormAttachments<TaskResponse>(
                        taskresponseBoth.Attachments, AttachmentsIDs_FieldName: "allAttachments");


                return View(taskresponseBoth);
            }
            
            using (var transaction = serviceProvider.projectSupportDB.Database.BeginTransaction())
            {
                try
                {
                    applicationUser.TaskResponses.Add(taskresponseBoth);
                    jobtask.Last_Modification_DateTime=DateTime.Now;
                    taskresponseBoth.Last_Modification_DateTime = DateTime.Now;
                    taskresponseBoth.Description = taskResponse.Description;
                    taskresponseBoth.Submitter_ApplicationUser= applicationUser;
                    taskresponseBoth.Title = taskResponse.Title;
                    if (ViewBag.isEdit==false)
                        taskresponseBoth.ReportVersion = ++jobtask.LastReportVersion;

                    //add attachments
                    serviceProvider.cacheMemoryProvider.UpdateAttachmentsList<TaskResponse>(taskresponseBoth.Attachments, "allAttachments");
                    taskresponseBoth.ReportFileAndPDF.DocFile= serviceProvider.cacheMemoryProvider
                        .UpdateAttachment<Attachment_with_two_Relations<ReportFileAndPDF>>(
                        taskresponseBoth.ReportFileAndPDF.DocFile, serviceProvider.projectSupportDB, "docFileName");
                    if (taskresponseBoth.ReportFileAndPDF.DocFile != null)
                        taskresponseBoth.ReportFileAndPDF.DocFile.FileVirtualName =
                            changeFileName(taskresponseBoth.ReportFileAndPDF.DocFile.FileVirtualName, jobtask.ReportNumber,
                            taskresponseBoth.ReportVersion);

                    taskresponseBoth.ReportFileAndPDF.PdfFile= serviceProvider.cacheMemoryProvider
                        .UpdateAttachment<Attachment_with_two_Relations<ReportFileAndPDF>>(
                        taskresponseBoth.ReportFileAndPDF.PdfFile, null,"pdfFileName");
                    if (taskresponseBoth.ReportFileAndPDF.PdfFile != null)
                        taskresponseBoth.ReportFileAndPDF.PdfFile.FileVirtualName =
                            changeFileName(taskresponseBoth.ReportFileAndPDF.PdfFile.FileVirtualName, jobtask.ReportNumber,
                            taskresponseBoth.ReportVersion);


                    foreach (var vulner in taskresponseBoth.Vulnerablities_Titles)
                        serviceProvider.projectSupportDB.Entry(vulner).State = EntityState.Deleted;

                    foreach (var vulnerability in highVulnerabilities.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        taskresponseBoth.Vulnerablities_Titles.Add(
                            new MyString<TaskResponse>(vulnerability.Trim(), "H")
                            );
                        taskresponseBoth.High_Vulnerabilities_Count++;
                    }
                    taskresponseBoth.High_Vulnerabilities_Count = Convert.ToByte(taskresponseBoth.Vulnerablities_Titles.Count(v => v.Label == "H"));
                    foreach (var vulnerability in mediumVulnerabilities.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        taskresponseBoth.Vulnerablities_Titles.Add(
                            new MyString<TaskResponse>(vulnerability.Trim(), "M")
                            );
                        taskresponseBoth.Medium_Vulnerabilities_Count++;
                    }
                    taskresponseBoth.Medium_Vulnerabilities_Count = Convert.ToByte(taskresponseBoth.Vulnerablities_Titles.Count(v => v.Label == "M"));
                    foreach (var vulnerability in lowVulnerabilities.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        taskresponseBoth.Vulnerablities_Titles.Add(
                            new MyString<TaskResponse>(vulnerability.Trim(),"L")
                            );
                        taskresponseBoth.Low_Vulnerabilities_Count++;
                    }
                    taskresponseBoth.Low_Vulnerabilities_Count = Convert.ToByte(taskresponseBoth.Vulnerablities_Titles.Count(v => v.Label == "L"));


                    taskresponseBoth.RefereshTagList(serviceProvider.projectSupportDB);
                    if (!ViewBag.isEdit)
                        serviceProvider.projectSupportDB.Add(taskresponseBoth);
                    else
                        serviceProvider.projectSupportDB.Entry(taskresponseBoth).State = EntityState.Modified;
                    await serviceProvider.projectSupportDB.SaveChangesAsync();
                    transaction.Commit();
                    jobtask.TaskResponse_to_getVulnerabilitiesCount = taskresponseBoth;
                    serviceProvider.projectSupportDB.SaveChanges();

                    //success:
                    return Redirect("~/Projects/"+taskresponseBoth.JobTask_Ref+"/tasks/" + 
                        taskresponseBoth.JobTask_Ref);
                }
                catch (Exception ee)
                {
                    return RedirectToAction(
                        nameof(ErrorController.Couse),
                        nameof(ErrorController), new { errorLog = (new ErrorLog() { ProgrammerMessage = "The process of adding a new project is fails." }) });
                }
            }
            
        }// end of create method




        private string changeFileName(string old_filename, string new_fileName, int versionNumber)
        {
            if (string.IsNullOrEmpty(old_filename))
                return "";
            string ext = Path.GetExtension(old_filename) ?? "";
            return new_fileName + ".v" + versionNumber.ToString() + ext;
        }





        [HttpGet, Route("Projects/{projectId:int:min(0)}/tasks/{taskId:int:min(0)}/initiateDocNumber")]
        public async Task<IActionResult> initiateDocNumber(int taskId)
        {
            var task = await serviceProvider.projectSupportDB.JobTasks
                .FirstOrDefaultAsync(t => t.ID == taskId);
            if (task == null)
                return NotFound();
            if (!string.IsNullOrEmpty(task.ReportNumber))
                return Redirect("~/Projects/" + task.Project_Ref + "/tasks/" + taskId);

            task.ReportNumber = getNewReportNumber(serviceProvider.projectSupportDB);
            return View(task);
        }





        [HttpPost, Route("Projects/{projectId:int:min(0)}/tasks/{taskId:int:min(0)}/initiateDocNumber")]
        public async Task<IActionResult> initiateDocNumber(int projectId, int taskId, string docNumber)
        {
            var task = await serviceProvider.projectSupportDB.JobTasks
                .FirstOrDefaultAsync(t => t.ID == taskId && t.IsDeleted != true && t.Project.IsDeleted != true);
            if (task == null)
                return NotFound();

            var reservedTask = serviceProvider.projectSupportDB.JobTasks.FirstOrDefault(t => t.ReportNumber == docNumber);
            if (reservedTask != null)
            {
                ViewBag.error = "The specified document number has been used before.";
                ViewBag.reservedTaskId = reservedTask.ID;
                ViewBag.reservedProjectId= reservedTask.Project_Ref;
                ViewBag.proposedDocNumber= docNumber;
                task.ReportNumber = getNewReportNumber(serviceProvider.projectSupportDB);
                return View(task);
            }


            if (getNewReportNumber(serviceProvider.projectSupportDB) == docNumber)
            {
                var lastNumber_in_currentYear = serviceProvider.projectSupportDB.ConfigurationFields
                    .FirstOrDefault(c => c.Key == ConfigurationFieldsNames.Last_ReportDocNumber_in_CurrentYear);
                if (lastNumber_in_currentYear == null)
                {
                    lastNumber_in_currentYear = new ConfigurationFields()
                    {
                        Key = ConfigurationFieldsNames.Last_ReportDocNumber_in_CurrentYear,
                        Value = "0"
                    };
                    serviceProvider.projectSupportDB.ConfigurationFields.Add(lastNumber_in_currentYear);
                }
                lastNumber_in_currentYear.Value = docNumber.Split('-').LastOrDefault();
            }

            task.ReportNumber = docNumber;
            task.RefereshTagList(serviceProvider.projectSupportDB);
            serviceProvider.projectSupportDB.SaveChanges();
            return Redirect("~/Projects/"+task.Project_Ref+"/tasks/"+task.ID+ "/Responses/0");
        }



        static public string getNewReportNumber(ProjectSupportDB db)
        {
            string currentYear = (new PersianCalendar().GetYear(DateTime.Now) % 100).ToString("00");
            var lastYear = db.ConfigurationFields
                .FirstOrDefault(c => c.Key == ConfigurationFieldsNames.LastYear_for_ReportDocNumber);
            var lastNumber_in_currentYear = db.ConfigurationFields
                .FirstOrDefault(c => c.Key == ConfigurationFieldsNames.Last_ReportDocNumber_in_CurrentYear);

            if (lastYear == null || lastNumber_in_currentYear == null)
            {
                if (lastYear == null)
                {
                    lastYear = new ConfigurationFields()
                    {
                        Key = ConfigurationFieldsNames.LastYear_for_ReportDocNumber,
                        Value = currentYear
                    };
                    db.ConfigurationFields.Add(lastYear);
                }
                if (lastNumber_in_currentYear == null)
                {
                    lastNumber_in_currentYear = new ConfigurationFields()
                    {
                        Key = ConfigurationFieldsNames.Last_ReportDocNumber_in_CurrentYear,
                        Value = "0"
                    };
                    db.ConfigurationFields.Add(lastNumber_in_currentYear);
                }
                db.SaveChanges();
            }

            if (lastYear.Value != currentYear)
            {
                lastYear.Value = currentYear;
                lastNumber_in_currentYear.Value = "0";
                db.SaveChanges();
            }

            var suggestedNumber = int.Parse(lastNumber_in_currentYear.Value) + 1;
            string newFullNumber = "05-" + currentYear + "-" + (suggestedNumber).ToString("00");
            var tasks = db.JobTasks.ToList();
            while (tasks.Any(t => t.ReportNumber == newFullNumber))
                newFullNumber = "05-" + currentYear + "-" + (++suggestedNumber).ToString("00");

            if (int.Parse(lastNumber_in_currentYear.Value) + 1 < suggestedNumber)
            {
                lastNumber_in_currentYear.Value = (suggestedNumber - 1).ToString();
                db.SaveChanges();
            }
            return newFullNumber;
        }


        [HttpGet, Route("Projects/{projectId:int:min(0)}/tasks/{taskId:int:min(0)}/responses/done")]
        //[ValidateAntiForgeryToken]
        public async Task<IActionResult> Done(int taskId)
        {

            ApplicationUser applicationUser = serviceProvider.projectSupportDB.Users.FirstOrDefault(u => u.UserName == this.User.Identity.Name);    //ApplicationUser applicationUser = Task.Run(async () => { return await userManager.GetUserAsync(this.User); }).Result;
            if (applicationUser == null) return NotFound();
            var jobtask = serviceProvider.projectSupportDB.JobTasks.FirstOrDefault(j => j.ID == taskId);
            if (jobtask == null) return NotFound();

            try
            {
                ++jobtask.LastReportVersion;
                var taskResponse = new TaskResponse()
                {
                    Title = "Done - There Is No Any Vulnerabilities",
                    JobTask = jobtask,
                    Low_Vulnerabilities_Count = 0,
                    Medium_Vulnerabilities_Count = 0,
                    High_Vulnerabilities_Count = 0,
                    Submitter_ApplicationUser = applicationUser,
                    ReportVersion = jobtask.LastReportVersion,
                    IsDone = true
                };
                applicationUser.TaskResponses.Add(taskResponse);
                jobtask.Last_Modification_DateTime = DateTime.Now;
                taskResponse.RefereshTagList(serviceProvider.projectSupportDB);
                serviceProvider.projectSupportDB.Add(taskResponse);
                await serviceProvider.projectSupportDB.SaveChangesAsync();
                jobtask.TaskResponse_to_getVulnerabilitiesCount = taskResponse;
                serviceProvider.projectSupportDB.SaveChanges();
                
                return Redirect("~/Projects/" + jobtask.Project_Ref + "/tasks/" + jobtask.ID);
            }
            catch (Exception ee)
            {
                return RedirectToAction(
                    nameof(ErrorController.Couse),
                    nameof(ErrorController), new { errorLog = (new ErrorLog() { ProgrammerMessage = "The process of adding a new project is fails." }) });
            }

        }// end of create method




        [HttpGet, Route("Projects/{projectId:int:min(0)}/tasks/{taskId:int:min(0)}/Responses/{responseId:int:min(0)}/delete")]
        public async Task<IActionResult> Delete(int responseId)
        {
            var response = serviceProvider.projectSupportDB.TaskResponses
                .Include(t => t.JobTask)
                .FirstOrDefault(m => m.ID == responseId);
            if (response == null)
                return NotFound();

            return View(response);
        }





        [HttpPost, Route("Projects/{projectId:int:min(0)}/tasks/{taskId:int:min(0)}/Responses/{responseId:int:min(0)}/delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int responseId,int projectId)
        {
            var taskResponse = await Delete(responseId, serviceProvider.projectSupportDB);
            if (taskResponse == null)
                return NotFound();

            return Redirect("~/Projects/"+projectId+"/tasks/" + taskResponse.JobTask_Ref);
        }



        public static async Task<TaskResponse> Delete(int taskResponseID, ProjectSupportDB db)
        {
            var response = db.TaskResponses
                .Include(t => t.ReportFileAndPDF).ThenInclude(rep => rep.DocFile)
                .Include(t => t.ReportFileAndPDF).ThenInclude(rep => rep.PdfFile)
                .Include(t => t.Attachments)
                .Include(t => t.Comments)
                .Include(t => t.Tags)
                .Include(t => t.JobTask)
                .Include(t => t.JobTask_to_getVulnerabilitiesCount)
                .Include(t => t.Vulnerablities_Titles)
                .FirstOrDefault(m => m.ID == taskResponseID);
            if (response == null)
                return null;
            if (response.JobTask_to_getVulnerabilitiesCount != null)
                response.JobTask.TaskResponse_to_getVulnerabilitiesCount = null;
            var deletedResponse = await Delete(response, db, true);
            return deletedResponse;
        }



        public static async Task<TaskResponse> Delete
            (TaskResponse taskResponse, ProjectSupportDB db, bool autoSaveDb =true)
        {
            if (!db.Entry(taskResponse).Collection(t => t.Attachments).IsLoaded)
            {
                db.Entry(taskResponse).Collection(t => t.Attachments).Load();
                db.Entry(taskResponse).Reference(t => t.ReportFileAndPDF).Load();
                db.Entry(taskResponse.ReportFileAndPDF).Reference(t => t.DocFile).Load();
                db.Entry(taskResponse.ReportFileAndPDF).Reference(t => t.PdfFile).Load();
                db.Entry(taskResponse).Collection(t => t.Comments).Load();
                db.Entry(taskResponse).Collection(t => t.Tags).Load();
                db.Entry(taskResponse).Collection(t => t.Vulnerablities_Titles).Load();
                if (!db.Entry(taskResponse).Reference(t => t.JobTask).IsLoaded)
                    db.Entry(taskResponse).Reference(t => t.JobTask).Load();
            }

            if (taskResponse.JobTask_to_getVulnerabilitiesCount != null)
                taskResponse.JobTask.TaskResponse_to_getVulnerabilitiesCount= null;

            if (taskResponse.ReportFileAndPDF.DocFile != null &&
                System.IO.File.Exists(taskResponse.ReportFileAndPDF.DocFile.FilePhysicalPath))
            {
                System.IO.File.Delete(taskResponse.ReportFileAndPDF.DocFile.FilePhysicalPath);
                db.Entry(taskResponse.ReportFileAndPDF.DocFile).State = EntityState.Deleted;
            }
            if (taskResponse.ReportFileAndPDF.PdfFile != null &&
                System.IO.File.Exists(taskResponse.ReportFileAndPDF.PdfFile.FilePhysicalPath))
            {
                System.IO.File.Delete(taskResponse.ReportFileAndPDF.PdfFile.FilePhysicalPath);
                db.Entry(taskResponse.ReportFileAndPDF.PdfFile).State = EntityState.Deleted;
            }

            AttachmentController.Delete<Attachment<TaskResponse>>(taskResponse.Attachments, db);
            db.RemoveRange(taskResponse.Vulnerablities_Titles);
            db.RemoveRange(taskResponse.Comments);
            db.RemoveRange(taskResponse.Tags);
            db.Entry(taskResponse).State=EntityState.Deleted;
            if (autoSaveDb)
                await db.SaveChangesAsync();

            return taskResponse;
        }



        public static async Task<ICollection<TaskResponse>> Delete
            (ICollection<TaskResponse> taskResponses, ProjectSupportDB db, bool autoSaveDb = true)
        {
            if (taskResponses== null)
                return null;
            var responses = taskResponses.ToList();
            for (int i = 0; i < taskResponses.Count; i++)
                await Delete(responses[i], db, false);
            if (autoSaveDb)
                await db.SaveChangesAsync();
            return taskResponses;
        }


    }
}