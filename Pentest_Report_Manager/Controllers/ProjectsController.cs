using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Claims;
using System.Threading;
using System.Threading.Tasks;
using BlogPortal.Core.BussinessTemplatesModel.BlogPost;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using ProjectSupport.Core.Models;
using ProjectSupport.Infrastructure;
using Pentest_Report_Manager.Classes;
using Pentest_Report_Manager.Services;
using static Pentest_Report_Manager.Controllers.AttachmentController;
using Pentest_Report_Manager.Services.Filters;

namespace Pentest_Report_Manager.Controllers
{
    [Authorize(Roles = "Admin, Pentester, Developer")]
    public class ProjectsController : Controller
    {
        private readonly ProjectSupportDB _dbContext;
        public UserManager<ApplicationUser> userManager { get; }
        public IHostingEnvironment HostingEnvironment { get; }
        public ICacheMemoryProvider cacheMemoryProvider { get; }
        public IMy_Service_Provider serviceProvider { get; }

        public ProjectsController(ProjectSupportDB context, 
            UserManager<ApplicationUser> userManager,
            IHostingEnvironment hostingEnvironment,
            ICacheMemoryProvider _cacheMemoryProvider,
            IMy_Service_Provider _serviceProvider
            )
        {
            _dbContext = context;
            this.userManager = userManager;
            HostingEnvironment = hostingEnvironment;
            cacheMemoryProvider = _cacheMemoryProvider;
            serviceProvider = _serviceProvider;
        }







        public async Task<IActionResult> Index()
        {
            var projects = await _dbContext.Projects.Where(p => p.IsDeleted != true)
                .Include(p => p.JobTasks).ThenInclude(t => t.TaskResponse_to_getVulnerabilitiesCount)
                .OrderByDescending(p => p.ID).ToListAsync();
            
            HttpContext.Items["controller"] = this; // as Controller;
            return View(projects);
        }





        public async Task<IActionResult> Summary(int? id)
        {
            if (id == null)
                return NotFound();

            var project = await _dbContext.Projects.FindAsync(id);
            if (project== null || project.IsDeleted)
                return NotFound();

            project.LoadRelatedData(_dbContext);
            return View(project);
        }




        [HttpGet, Route("Projects/{projectId:int:min(0)}")]
        public async Task<IActionResult> Details(int? projectId)
        {
            ViewBag.sp = serviceProvider;
            if (projectId == null)
                return NotFound();
            var project = await _dbContext.Projects
                .Where(p => p.ID == projectId && p.IsDeleted != true)
                .Include(p => p.JobTasks)
                .Include(p => p.JobTasks).ThenInclude(t=>t.TaskResponse_to_getVulnerabilitiesCount)
                .Include(p => p.JobTasks)
                    .ThenInclude(t=>t.Pentesters)
                    .ThenInclude(jp=>jp.Pentester)
                    .ThenInclude(p=>p.ApplicationUser)
                //.Include(p => p.Submitter_Pentester)
                .Include(p => p.Attachments)
                //.Include(p=> p.SubProjects)
                //.Include(p => p.Modifier_Pentester)
                //.Include(p => p.ParrentProject)
                .FirstOrDefaultAsync(m => m.ID == projectId);
            if (project == null)
                return NotFound();
           
            HttpContext.Items["controller"] = this;
            return View(project);
        }





        [HttpGet, Route("Projects/{projectId:int:min(0)}/Tasks")]
        public async Task<IActionResult> Tasks(int? projectId)
        {
            if (projectId == null)
                return NotFound();

            var project = await _dbContext.Projects
                .Where(p => p.ID == projectId && p.IsDeleted != true)
                .Include(p => p.JobTasks)
                .FirstOrDefaultAsync(m => m.ID == projectId);

            if (project == null)
                return NotFound();


            foreach (var task in project.JobTasks)
                if (!task.IsDeleted)
                    task.LoadRelatedData(_dbContext);
            HttpContext.Items["controller"] = this;

            return View(project);
        }




        [HttpGet]
        [ServiceFilter(typeof(FormID_isRequired))]
        public IActionResult Create(int? parrentProjectID = null)
        {

            //CookieOptions option = new CookieOptions();
            //option.Expires = DateTime.Now.AddHours(5);
            //option.Secure = true;
            //option.HttpOnly = false;
            //option.IsEssential = true;
            //Response.Cookies.Append("fileUploadToken", httpContext.Session.Id, option);


            ViewBag.sp = serviceProvider;

            var newProject = new Project() { ParrentProject_Ref = parrentProjectID };
            newProject.Attachments = cacheMemoryProvider.GetCurrentFormAttachments<Project>().ToList();

            return View(newProject);
        }






        [HttpPost]
        [ServiceFilter(typeof(FormID_isRequired))]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(Project project)
        {

            ViewBag.sp = serviceProvider;

            if (ModelState.IsValid)
            {
                //string userId = User.FindFirst(ClaimTypes.NameIdentifier).Value;
                //int user_id;
                //if (!int.TryParse(userId, out user_id))
                //    return NotFound();

                string userName = userManager.GetUserId(this.User);
                var pentester = _dbContext.Pentesters.Include(p => p.ApplicationUser).ToList();
                    //.FirstOrDefault(p => p.ApplicationUser.UserName == userName);

                

                ApplicationUser applicationUser = await userManager.GetUserAsync(this.User);    //ApplicationUser applicationUser = Task.Run(async () => { return await userManager.GetUserAsync(this.User); }).Result;
                if (applicationUser == null )    //this.User.IsInRole("Admin, Pentester");
                    return NotFound();
                await _dbContext.Entry(applicationUser).Reference(x => x.Pentester).LoadAsync();
                if (applicationUser.Pentester == null)   
                    return NotFound();

                using (var transaction = _dbContext.Database.BeginTransaction())
                {
                    try
                    {
                        
                        project.Submitter_Pentester_Ref = applicationUser.Pentester.ID;
                        project.ParrentProject_Ref = _dbContext.Projects.Any(e => e.ID == project.ID) ? project.ParrentProject_Ref : null;
                        project.Description = project.Description;


                        //add attachments
                        cacheMemoryProvider.UpdateAttachmentsList<Project>(project.Attachments);

                        project.RefereshTagList(_dbContext);
                        _dbContext.Add(project);
                        await _dbContext.SaveChangesAsync();


                        transaction.Commit();
                        //success:
                        return Redirect("~/Projects/"+project.ID);
                    }
                    catch (Exception ee)
                    {
                        return RedirectToAction(
                            nameof(ErrorController.Couse),
                            nameof(ErrorController), new { errorLog = (new ErrorLog() { ProgrammerMessage = "The process of adding a new project is fails." }) });
                    }
                }
            }


            // fail of modelState
            project.Attachments = cacheMemoryProvider.GetCurrentFormAttachments<Project>().ToList();

            return View(project);
        }





        [HttpGet]
        [ServiceFilter(typeof(FormID_isRequired))]
        public async Task<IActionResult> Edit(int id)
        {

            ViewBag.sp = serviceProvider;

            var originalProject = await _dbContext.Projects
                            .Where(p => p.ID == id && p.IsDeleted != true)
                            .Include(p => p.Attachments)
                            .Include(p => p.Tags)
                            .FirstOrDefaultAsync(m => m.ID == id);
            if (originalProject == null)
                return NotFound();

            originalProject.Attachments = cacheMemoryProvider.GetCurrentFormAttachments<Project>(originalProject.Attachments).ToList();

            return View(originalProject);
        }






        [HttpPost]
        [ServiceFilter(typeof(FormID_isRequired))]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, Project project)
        {
            ViewBag.sp = serviceProvider;

            if (ModelState.IsValid)
            {
                string userId = User.FindFirst(ClaimTypes.NameIdentifier).Value;
                int user_id;
                if (!int.TryParse(userId, out user_id))
                    return NotFound();
                ApplicationUser applicationUser = await userManager.GetUserAsync(this.User);    //ApplicationUser applicationUser = Task.Run(async () => { return await userManager.GetUserAsync(this.User); }).Result;
                if (applicationUser == null)    //this.User.IsInRole("Admin, Pentester");
                    return NotFound();


                using (var transaction = _dbContext.Database.BeginTransaction())
                {
                    try
                    {

                        var originalProject = await _dbContext.Projects
                            //.Include(p => p.Submitter_Pentester)
                            .Include(p => p.Attachments)
                            .Include(p => p.Tags)
                            //.Include(p => p.Comments)
                            //.Include(p => p.JobTasks)
                            //.Include(p => p.SubProjects)
                            //.Include(p => p.Modifier_Pentester)
                            //.Include(p => p.ParrentProject)
                            .FirstOrDefaultAsync(m => m.ID == id);
                        if (originalProject == null)
                            return NotFound();


                        originalProject.Modifier_Pentester_Ref = user_id;
                        originalProject.AdomName = project.AdomName;
                        originalProject.Description = project.Description;
                        originalProject.Owner = project.Owner;
                        originalProject.PolicyName = project.PolicyName;
                        originalProject.Priority = project.Priority;
                        originalProject.ProjectName = project.ProjectName;
                        originalProject.ServerPool = project.ServerPool;
                        originalProject.URL = project.URL;
                        originalProject.VirtualIP = project.VirtualIP;


                        //mannage attachments
                        cacheMemoryProvider.UpdateAttachmentsList<Project>(originalProject.Attachments);
                        originalProject.RefereshTagList(_dbContext);
                        _dbContext.Update(originalProject);
                        await _dbContext.SaveChangesAsync();

                        transaction.Commit();
                        //success:
                        return Redirect("~/Projects/" + originalProject.ID);
                    }
                    catch (Exception ee)
                    {
                        return RedirectToAction(
                            nameof(ErrorController.Couse),
                            nameof(ErrorController), new { errorLog = (new ErrorLog() { ProgrammerMessage = "The process of adding a new project is fails." }) });
                    }
                }
            }


            // fail of modelState
            var originalProj = await _dbContext.Projects
                            .Where(p => p.ID == id && p.IsDeleted != true)
                            .Include(p => p.Attachments)
                            .FirstOrDefaultAsync(m => m.ID == id);
            if (originalProj == null)
                return NotFound();

            project.Attachments = cacheMemoryProvider.GetCurrentFormAttachments<Project>(originalProj.Attachments).ToList();

            return View(project);
        }




        


        public async Task<IActionResult> Delete(int? id)
        {

            if (id == null)
                return NotFound();

            var project = await _dbContext.Projects
                .Where(p => p.ID == id && p.IsDeleted != true)
                .Include(p => p.Submitter_Pentester)
                .Include(p => p.Attachments)
                .Include(p => p.Comments)
                .Include(p => p.JobTasks)
                .Include(p => p.SubProjects)
                .Include(p => p.Modifier_Pentester)
                .Include(p => p.ParrentProject)
                .FirstOrDefaultAsync(m => m.ID == id);

            if (project == null)
                return NotFound();

            return View(project);
        }




        
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var project = await Delete(id, serviceProvider.projectSupportDB);
            if (project == null)
                return NotFound();

            return Redirect("~/projects/");
        }



        public static async Task<Project> Delete(int projectID, ProjectSupportDB db, bool autoSaveDb = true)
        {
            var project = db.Projects
                .Include(t => t.Attachments)
                .Include(t => t.Comments)
                .Include(t => t.JobTasks)
                .Include(t => t.SubProjects)
                .Include(t => t.Tags)
                .FirstOrDefault(m => m.ID == projectID);
            if (project == null)
                return null;

            return await Delete(project, db, true);
        }


        public static async Task<Project> Delete(Project project, ProjectSupportDB db, bool autoSaveDb = true)
        {

            if (!db.Entry(project).Collection(t => t.Attachments).IsLoaded)
            {
                db.Entry(project).Collection(t => t.Attachments).Load();
                db.Entry(project).Collection(t => t.Comments).Load();
                db.Entry(project).Collection(t => t.JobTasks).Load();
                db.Entry(project).Collection(t => t.SubProjects).Load();
                db.Entry(project).Collection(t => t.Tags).Load();
            }

            AttachmentController.Delete<Attachment<Project>>(project.Attachments, db);
            db.RemoveRange(project.Comments);
            db.RemoveRange(project.Tags);
            foreach (var pro in project.SubProjects)
            {
                await Delete(pro, db, false);
                db.Remove(pro);
            }
            await TasksController.Delete(project.JobTasks, db, false);
            db.Entry(project).State=EntityState.Deleted;
            if (autoSaveDb)
                await db.SaveChangesAsync();
            return project;
        }


    }
}
