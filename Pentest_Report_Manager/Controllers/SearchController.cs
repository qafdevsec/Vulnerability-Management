using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Pentest_Report_Manager.Services;
using ProjectSupport.Core.Models;

namespace Pentest_Report_Manager.Controllers
{
    public class SearchController : Controller
    {
        public ICacheMemoryProvider cacheMemoryProvider { get; }
        public IMy_Service_Provider serviceProvider { get; }
        public SearchController(ICacheMemoryProvider _cacheMemoryProvider, IMy_Service_Provider _serviceProvider)
        {
            cacheMemoryProvider = _cacheMemoryProvider;
            serviceProvider = _serviceProvider;
        }




        //public IActionResult Index()
        //{
        //    return View(GetTagsList());
        //}


        public class FormData
        {
            public List<SearchKeyword> searchKeywords { get; set; }
            public string pentestStatus { get; set; }

        }


        [HttpPost, Route("search/queryProjects")]
        public IActionResult queryProjects([FromBody] FormData formData)
        {
            HttpContext.Items["controller"] = this; // as Controller;
            ViewBag.isByAjax = true;

            List<SearchKeyword> searchKeywords = formData.searchKeywords;
            //try
            //{
            //    searchKeywords = JsonConvert.DeserializeObject<List<SearchKeyword>>("formData.query");
            //}
            //catch (Exception ex)
            //{
            //    return Content("could not parse input query");
            //}



            var projectsList = new List<Project>();
            var emptyKeys = searchKeywords.Where(t => t.key == SearchEntitiyType.Empty).ToList();
            if (emptyKeys.Count == 0)
                projectsList = serviceProvider.projectSupportDB.Projects.ToList();
            else
                foreach (var key in emptyKeys)
                {
                    var p1 =
                       serviceProvider.projectSupportDB.Tag_Project
                        .Include(p => p.ParrentObject)
                        .Where(t => t.Text.Contains(key.text))
                        .Select(t => t.ParrentObject).ToList();
                    var p2 =
                      serviceProvider.projectSupportDB.Tag_JobTask
                    .Include(p => p.ParrentObject).ThenInclude(jt => jt.Project)
                    .Where(t => t.Text.Contains(key.text))
                    .Select(t => t.ParrentObject.Project).ToList();

                    var p3 =
                         serviceProvider.projectSupportDB.Tag_TaskResponse
                    .Include(p => p.ParrentObject).ThenInclude(r => r.JobTask).ThenInclude(jt => jt.Project)
                    .Where(t => t.Text.Contains(key.text))
                    .Select(t => t.ParrentObject.JobTask.Project).ToList();
                        
                    
                    if (p1.Count > 0)
                        projectsList = projectsList.Union(p1, new ProjectComparer()).ToList();
                    if (p2.Count > 0)
                        projectsList = projectsList.Union(p2, new ProjectComparer()).ToList();
                    if (p3.Count > 0)
                        projectsList = projectsList.Union(p3, new ProjectComparer()).ToList();


                    var pentesters = serviceProvider.projectSupportDB.Tag_ApplicationUser
                           .Include(p => p.ParrentObject).ThenInclude(r => r.Pentester)
                           .Where(t => t.Text.Contains(key.text))
                           .Select(t => t.ParrentObject.Pentester).ToList();
                    foreach (var pentester in pentesters)
                    {
                        var p = serviceProvider.projectSupportDB.JobTask_Pentesters
                              .Include(jp => jp.JobTask).ThenInclude(t => t.Project)
                              .Where(jp => jp.Pentester_Ref == pentester.ID)
                              .Select(jp => jp.JobTask.Project).ToList();
                        if (p.Count > 0) 
                            projectsList = projectsList.Union(p, new ProjectComparer()).ToList();
                    }
                }




            var projKeys = searchKeywords.Where(t => t.key == SearchEntitiyType.Project ).ToList();
            foreach (var key in projKeys)
                projectsList = projectsList.Intersect(
                    serviceProvider.projectSupportDB.Tag_Project
                    .Include(p => p.ParrentObject)
                    .Where(t => t.Text.Contains(key.text))
                    .Select(t => t.ParrentObject).ToList()
                    , new ProjectComparer()).ToList();

            var taskKeys = searchKeywords.Where(t => t.key == SearchEntitiyType.Task ).ToList();
            foreach (var key in taskKeys)
                projectsList = projectsList.Intersect(
                    serviceProvider.projectSupportDB.Tag_JobTask
                    .Include(p => p.ParrentObject).ThenInclude(jt=>jt.Project)
                    .Where(t =>t.Text.Contains(key.text))
                    .Select(t => t.ParrentObject.Project).ToList()
                    , new ProjectComparer()).ToList();

            var responseKeys = searchKeywords.Where(t => t.key == SearchEntitiyType.Response).ToList();
            foreach (var key in responseKeys)
                projectsList = projectsList.Intersect(
                    serviceProvider.projectSupportDB.Tag_TaskResponse
                    .Include(p => p.ParrentObject).ThenInclude(r => r.JobTask).ThenInclude(jt => jt.Project)
                    .Where(t => t.Text.Contains(key.text))
                    .Select(t => t.ParrentObject.JobTask.Project).ToList()
                    , new ProjectComparer()).ToList();

            var userKeys = searchKeywords.Where(t => t.key == SearchEntitiyType.User ).ToList();
            foreach (var key in userKeys)
            {
                var pentesters = serviceProvider.projectSupportDB.Tag_ApplicationUser
                    .Include(p => p.ParrentObject).ThenInclude(r => r.Pentester)
                    .Where(t => t.Text.Contains(key.text))
                    .Select(t => t.ParrentObject.Pentester).ToList();
                foreach (var pentester in pentesters) 
                    projectsList = projectsList.Intersect(
                        serviceProvider.projectSupportDB.JobTask_Pentesters
                        .Include(jp => jp.JobTask).ThenInclude(t => t.Project)
                        .Where(jp => jp.Pentester_Ref == pentester.ID)
                        .Select(jp => jp.JobTask.Project).ToList()
                         , new ProjectComparer()).ToList();
            }



            //---------------------------------------------------------------------


            projectsList = projectsList.Distinct(new ProjectComparer()).OrderByDescending(p => p.ID).ToList();
            var plist = projectsList.ToList();
            foreach (var proj in plist)
            {
                var originalProj = projectsList.FirstOrDefault(p => p.ID == proj.ID);
                serviceProvider.projectSupportDB.Entry(originalProj)
                    .Collection(p => p.JobTasks)
                    .Query().Include(t => t.TaskResponse_to_getVulnerabilitiesCount)
                            .Include(t => t.TaskResponses)
                    .Load();
            }
            //.Include(p => p.JobTasks).ThenInclude(t => t.TaskResponse_to_getVulnerabilitiesCount)



            switch (formData.pentestStatus)
            {
                case "0":
                    break;
                case "not_pentested":
                    projectsList = projectsList.Where(p => p.JobTasks.Count == 0).ToList();
                    break;
                case "pentesting":
                    projectsList = projectsList.Where(p => 
                             p.JobTasks.LastOrDefault()?.TaskResponses.Count==0
                        ).ToList();
                    break;
                case "vulnerable":
                    projectsList = projectsList.Where(p =>
                            p.JobTasks.LastOrDefault()?.TaskResponse_to_getVulnerabilitiesCount?.IsDone == false 
                            // && p.JobTasks.LastOrDefault()?.TaskResponse_to_getVulnerabilitiesCount?.Vulnerablities_Titles.Count > 0
                        ).ToList();
                    break;
                case "done":
                    projectsList = projectsList.Where(p =>
                            p.JobTasks.LastOrDefault()?.TaskResponse_to_getVulnerabilitiesCount?.IsDone==true
                        ).ToList();
                    break;
            }



            return View("../projects/list", projectsList);
        }






        public JsonResult GetSearchKeywordsList()
        {
            List<SearchKeyword> result = new List<SearchKeyword>();
            //var CacheResult = cacheMemoryProvider.GetSearchKeywordsFromCache();
            //if (CacheResult != null)
            //    return CacheResult;


            result.AddRange(serviceProvider.projectSupportDB.Tag_Project
                .Select(t => new SearchKeyword()
                {
                    key = SearchEntitiyType.Project,
                    entity = "Project",
                    text = t.Text
                }).ToList().Distinct(new SearchKeywordComparer()).ToList());

            result.AddRange(serviceProvider.projectSupportDB.Tag_JobTask
                .Select(t => new SearchKeyword()
                {
                    key = SearchEntitiyType.Task,
                    entity = "Pentest",
                    text = t.Text
                }).ToList().Distinct(new SearchKeywordComparer()).ToList());

            result.AddRange(serviceProvider.projectSupportDB.Tag_TaskResponse
                .Select(t => new SearchKeyword()
                {
                    key = SearchEntitiyType.Response,
                    entity = "Report",
                    text = t.Text
                }).ToList().Distinct(new SearchKeywordComparer()).ToList());

            result.AddRange(serviceProvider.projectSupportDB.Tag_ApplicationUser
                .Select(t => new SearchKeyword()
                {
                    key = SearchEntitiyType.User,
                    entity = "User",
                    text = t.Text
                }).ToList().Distinct(new SearchKeywordComparer()).ToList());


            //cacheMemoryProvider.PushSearchKeywordsToCache(result); //cache will be expired only in refereshTags method.
            //memoryCache.Remove("KeywordsList");

            return Json(result);
        }


        public class SearchEntitiyType{
            public const string Project = "Project&&&&&";
            public const string Task = "Task&&&&&";
            public const string Response = "Response&&&&&";
            public const string User = "User&&&&&";
            public const string Empty = "";

        }

        public class SearchKeyword {
            public string key { get; set; }
            public string text { get; set; }
            public string entity { get; set; }

        }

        class SearchKeywordComparer : IEqualityComparer<SearchKeyword>
        {
            public bool Equals(SearchKeyword x, SearchKeyword y)
            {
                if (x.text == y.text)
                    return true;
                return false;
            }

            public int GetHashCode(SearchKeyword obj)
            {
                return obj.text.GetHashCode();
            }
        }


        public class ProjectComparer : IEqualityComparer<Project>
        {
            public bool Equals(Project firstObj, Project secondObj)
            {
                if (firstObj == null && secondObj == null)
                    return true;

                if (firstObj == null || secondObj == null)
                    return false;

                // Your equality logic goes to here
                return firstObj.ID == secondObj.ID;
            }

            public int GetHashCode(Project obj)
            {
                if (obj == null) return 0;
                return obj.ID;
            }
        }


       

    }



    public class SearchTagItem
    {
        public string ModelFieldId { get; set; }
        public string GroupName { get; set; }
        public string Text { get; set; }
    }

}
