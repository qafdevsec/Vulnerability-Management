using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web;
using BlogPortal.Core.BussinessTemplatesModel.BlogPost;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.Extensions.Caching.Memory;
using Newtonsoft.Json;
using Pentest_Report_Manager.Controllers;
using ProjectSupport.Core.Models;
using static Pentest_Report_Manager.Controllers.AttachmentController;
using static Pentest_Report_Manager.Controllers.SearchController;

namespace Pentest_Report_Manager.Services
{


    public interface ICacheMemoryProvider
    {
        void PushSearchKeywordsToCache(List<SearchKeyword> keywords);
        List<SearchKeyword> GetSearchKeywordsFromCache();

        List<Attachment<T>> GetCurrentFormAttachments<T>(ICollection<Attachment<T>> db_Attachments = null,
            string AttachmentsIDs_FieldName = "attachmentsIDsList");


        List<Attachment> GetCurrentFormAttachments(ICollection<Attachment> db_Attachments = null,
            string AttachmentsIDs_FieldName = "attachmentsIDsList");


        T GetCurrentFormAttachment<T>(T db_Attachment = null,
            string AttachmentsIDs_FieldName = "attachmentsIDsList") where T : Attachment, new();

        string GetFormId();




        List<AttachmentController.UploadedFileInSession> GetUploadingFilesList();
        void SetUploadingFilesList(List<AttachmentController.UploadedFileInSession> list);
        void UpdateAttachmentsList<T>(ICollection<Attachment<T>> originalAttachments,
            string AttachmentsIDs_FieldName = "attachmentsIDsList");


        void UpdateAttachmentsList222(ICollection<Attachment> originalAttachments,
            string AttachmentsIDs_FieldName = "attachmentsIDsList");


        T UpdateAttachment<T>(T originalAttachment, DbContext db = null,
            string AttachmentsIDs_FieldName = "attachmentsIDsList") where T : Attachment, new();
    }



    public class CacheMemoryProvider : ICacheMemoryProvider
    {

        public readonly IMemoryCache memoryCache;

        public IHttpContextAccessor httpContextAccessor { get; }

        public IHostingEnvironment HostingEnvironment { get; }
        public CacheMemoryProvider(IMemoryCache _memoryCache, IHttpContextAccessor _httpContextAccessor,
            IHostingEnvironment hostingEnvironment
            )
        {
            memoryCache = _memoryCache;
            httpContextAccessor = _httpContextAccessor;
            HostingEnvironment = hostingEnvironment;
        }


        private string GetCacheItem(string key)
        {
            string result;
            if (!memoryCache.TryGetValue(key, out result))
                return null;

            return result;
        }

        private string GetCacheItem(string key, string value)
        {
            string result;
            if (!memoryCache.TryGetValue(key, out result))
                return value;

            return result;
        }


        private void SetCacheItem(string key, string value)
        {
            
            MemoryCacheEntryOptions cacheEntryOptions = new MemoryCacheEntryOptions()
                .SetSlidingExpiration(TimeSpan.FromMinutes(180));
            memoryCache.Set(key, value, cacheEntryOptions);

        }






        public List<UploadedFileInSession> GetUploadingFilesList()
        {
            List<UploadedFileInSession> uploadedFileList = new List<UploadedFileInSession>();
            var fromCache = GetCacheItem("UploadedFileList",
                JsonConvert.SerializeObject(uploadedFileList));
            uploadedFileList = JsonConvert.DeserializeObject<List<UploadedFileInSession>>(fromCache);

            return uploadedFileList;
        }

        public void SetUploadingFilesList(List<UploadedFileInSession> list)
        {
            SetCacheItem("UploadedFileList", JsonConvert.SerializeObject(list));
        }









        public List<Attachment<T>> GetCurrentFormAttachments<T>(ICollection<Attachment<T>> db_Attachments = null,
            string AttachmentsIDs_FieldName = "attachmentsIDsList")
        {

            var formId = httpContextAccessor.HttpContext.Request.Query
                .FirstOrDefault(q => q.Key == "FormId");

            List<Attachment<T>> Attachments = new List<Attachment<T>>();

            if (db_Attachments!= null && httpContextAccessor.HttpContext.Request.Method.ToLower() == "get")
                Attachments.AddRange(db_Attachments);
            else if (db_Attachments != null && db_Attachments.Count>0 
                && httpContextAccessor.HttpContext.Request.Method.ToLower() == "post")
            {
                List<string> uploadingfilesNames;
                uploadingfilesNames = httpContextAccessor.HttpContext.Request
                    .Form[AttachmentsIDs_FieldName].ToString()
                    .Split(',', options: StringSplitOptions.RemoveEmptyEntries).ToList<string>();
                Attachments.AddRange(db_Attachments.Where(a =>
                uploadingfilesNames.Any(name => name == a.FilePhysicalName)).ToList());

            }


            var newUploadingFilesList = GetUploadingFilesList().Where(u => u.IsUploadFinalized).ToList();
            foreach (var upload in newUploadingFilesList
                .Where(a => a.FormId == formId.Value && a.IsUploadFinalized
                && a.AttachmentsIDs_FieldName == AttachmentsIDs_FieldName))
                Attachments.Add(new Attachment<T>()
                {
                    FilePhysicalName = upload.FilePhysicalName,
                    FileVirtualName = upload.FileVirtualName,
                    FilePhysicalPath = upload.FilePhysicalFullAdress,
                    FileWebRootFullPath = upload.FileWebRootFullAdress
                });


            
           
            return Attachments;
        }



        public List<Attachment> GetCurrentFormAttachments(ICollection<Attachment> db_Attachments = null,
            string AttachmentsIDs_FieldName = "attachmentsIDsList")
        {

            var convertedAttachments = db_Attachments.Select(a => new Attachment<Project>() { 
                Extention = a.Extention,
                FilePhysicalName=a.FilePhysicalName,
                FilePhysicalPath = a .FilePhysicalPath,
                FileVirtualName = a.FileVirtualName,
                FileWebRootFullPath=a.FileWebRootFullPath,
                ID=a.ID,
                Lable=a.Lable
            }).ToList();
            var resulAttachments = GetCurrentFormAttachments<Project>(convertedAttachments, AttachmentsIDs_FieldName);
            return resulAttachments.Select(a => new Attachment()
            {
                Extention = a.Extention,
                FilePhysicalName = a.FilePhysicalName,
                FilePhysicalPath = a.FilePhysicalPath,
                FileVirtualName = a.FileVirtualName,
                FileWebRootFullPath = a.FileWebRootFullPath,
                ID = a.ID,
                Lable = a.Lable
            }).ToList();



            //List<UploadedFileInSession> uploadedFileList = GetUploadingFilesList();
            //var formId = httpContextAccessor.HttpContext.Request.Query.FirstOrDefault(q => q.Key == "FormId");

            //List<Attachment> Attachments = new List<Attachment>();
            //if (db_Attachments != null)
            //    Attachments.AddRange(db_Attachments);


            //var uploadingFilesList = GetUploadingFilesList();
            //foreach (var upload in uploadingFilesList.Where(a => a.FormId == formId.Value
            //    && a.IsUploadFinalized && a.AttachmentsIDs_FieldName == AttachmentsIDs_FieldName))
            //    Attachments.Add(new Attachment()
            //    {
            //        FilePhysicalName = upload.FilePhysicalName,
            //        FileVirtualName = upload.FileVirtualName,
            //        FilePhysicalPath = upload.FilePhysicalFullAdress,
            //        FileWebRootFullPath = upload.FileWebRootFullAdress
            //    });

            //return Attachments;
        }


        public T GetCurrentFormAttachment<T>(T db_Attachment = null,
            string AttachmentsIDs_FieldName = "attachmentsIDsList") where T : Attachment, new()
        {

            List<Attachment<Project>> list = new List<Attachment<Project>>();
            if (db_Attachment != null)
                list.Add(new Attachment<Project>()
                {
                    FilePhysicalName = db_Attachment.FilePhysicalName,
                    FileVirtualName = db_Attachment.FileVirtualName,
                    FilePhysicalPath = db_Attachment.FilePhysicalPath,
                    FileWebRootFullPath = db_Attachment.FileWebRootFullPath,
                    ID = db_Attachment.ID
                });


            List<Attachment<Project>> attachments = GetCurrentFormAttachments<Project>(list, AttachmentsIDs_FieldName);
            if (attachments == null || attachments.Count == 0)
                return null;
            else
                return new T()
                {
                    FilePhysicalName = attachments.LastOrDefault().FilePhysicalName,
                    FileVirtualName = attachments.LastOrDefault().FileVirtualName,
                    FilePhysicalPath = attachments.LastOrDefault().FilePhysicalPath,
                    FileWebRootFullPath = attachments.LastOrDefault().FileWebRootFullPath,
                    ID = attachments.LastOrDefault().ID
                };
        }



        public string GetFormId()
        {

            string FormId;
            bool isGet = httpContextAccessor.HttpContext.Request.Method.ToUpper() == "GET";

            FormId = httpContextAccessor.HttpContext.Request.Query["FormId"];
            if (string.IsNullOrEmpty(FormId) && !isGet)
                try
                {
                    FormId = httpContextAccessor.HttpContext.Request.Form != null ? httpContextAccessor.HttpContext.Request.Form["FormId"].ToString() : "";
                }
                catch (Exception) { }
            FormId = FormId ?? "";

            return FormId;
        }






        public void UpdateAttachmentsList222(ICollection<Attachment> originalAttachments,
            string AttachmentsIDs_FieldName = "attachmentsIDsList")
        {

            
            //List<UploadedFileInSession> uploadedFileList = GetUploadingFilesList();
            //string formId = GetFormId();
            //if (formId == null)
            //    return; // check if mac is correct



            //// get New Names list
            //string attachmentsIDsList = httpContextAccessor.HttpContext.Request.Form[AttachmentsIDs_FieldName];
            //List<string> attachmentsNames = attachmentsIDsList.Split(',', options: StringSplitOptions.RemoveEmptyEntries).ToList<string>();


            ////delete old attachments
            //var deleteable = originalAttachments.Where(a => !attachmentsNames.Any(name => name == a.FilePhysicalName)).ToList();
            //foreach (var attach in deleteable)
            //{
            //    if (File.Exists(attach.FilePhysicalPath))
            //        File.Delete(attach.FilePhysicalPath);
            //    originalAttachments.Remove(attach);
            //}


            ////add new attachments
            //var newNames = attachmentsNames.Except(originalAttachments.Select(a => a.FilePhysicalName).ToList());
            //foreach (var name in newNames)
            //{
            //    if (!uploadedFileList.Any(f => f.FilePhysicalName == name && f.FormId == formId))
            //        continue;
            //    var filenameStandard = uploadedFileList.FirstOrDefault(f =>
            //        f.FilePhysicalName == name && f.FormId == formId);
            //    if (!File.Exists(filenameStandard.FilePhysicalFullAdress))
            //    {
            //        uploadedFileList.Remove(filenameStandard);
            //        continue;
            //    }



            //    // move file to uploads

            //    string contentRootPath = HostingEnvironment.WebRootPath;
            //    string pathFolder = Path.Combine(contentRootPath, @"Uploads\");
            //    string newPhysicalPath = Path.Combine(pathFolder, filenameStandard.FilePhysicalName);
            //    string newWebPath = Path.Combine("/Uploads/", filenameStandard.FilePhysicalName);

            //    File.Move(filenameStandard.FilePhysicalFullAdress, newPhysicalPath);

            //    filenameStandard.FilePhysicalFullAdress = newPhysicalPath;
            //    filenameStandard.FileWebRootFullAdress = newWebPath;



            //    // add as new attachment to db
            //    originalAttachments.Add(new Attachment()
            //    {
            //        FileVirtualName = filenameStandard.FileVirtualName,
            //        FilePhysicalName = filenameStandard.FilePhysicalName,
            //        FilePhysicalPath = filenameStandard.FilePhysicalFullAdress,
            //        FileWebRootFullPath = filenameStandard.FileWebRootFullAdress
            //    });

            //    uploadedFileList.Remove(filenameStandard);
            //}

            //SetUploadingFilesList(uploadedFileList);

        }



        public void UpdateAttachmentsList<T>(ICollection<Attachment<T>> originalAttachments,
            string AttachmentsIDs_FieldName = "attachmentsIDsList")
        {
            List<UploadedFileInSession> newUploadingFileList = GetUploadingFilesList();
            string formId = GetFormId();
            if (formId == null)
                return; // check if mac is correct

            List<string> approvedAttachmentsNames = httpContextAccessor.HttpContext.Request.Form[AttachmentsIDs_FieldName]
                .ToString().Split(',', options: StringSplitOptions.RemoveEmptyEntries).ToList<string>();
            var deleteable = originalAttachments.Where(a => !approvedAttachmentsNames.Any(name => name == a.FilePhysicalName)).ToList();
            foreach (var attach in deleteable)
            {
                if (File.Exists(attach.FilePhysicalPath))
                    File.Delete(attach.FilePhysicalPath);
                originalAttachments.Remove(attach);
            }

            //add new attachments
            var newNamesThatMustBeUploaded = approvedAttachmentsNames.Except(
                originalAttachments.Select(a => a.FilePhysicalName).ToList());
            foreach (var name in newNamesThatMustBeUploaded)
            {
                if (!newUploadingFileList.Any(f => f.FilePhysicalName == name && f.FormId == formId))
                    continue;
                var filenameStandard = newUploadingFileList.FirstOrDefault(f =>
                    f.FilePhysicalName == name && f.FormId == formId);
                if (!File.Exists(filenameStandard.FilePhysicalFullAdress))
                {
                    newUploadingFileList.Remove(filenameStandard);
                    continue;
                }

                // move file to uploads
                string contentRootPath = HostingEnvironment.WebRootPath;
                string pathFolder = Path.Combine(contentRootPath, @"Uploads\");
                string newPhysicalPath = Path.Combine(pathFolder, filenameStandard.FilePhysicalName);
                string newWebPath = Path.Combine("/Uploads/", filenameStandard.FilePhysicalName);
                File.Move(filenameStandard.FilePhysicalFullAdress, newPhysicalPath);
                filenameStandard.FilePhysicalFullAdress = newPhysicalPath;
                filenameStandard.FileWebRootFullAdress = newWebPath;

                // add as new attachment to db
                originalAttachments.Add(new Attachment<T>()
                {
                    FileVirtualName = filenameStandard.FileVirtualName,
                    FilePhysicalName = filenameStandard.FilePhysicalName,
                    FilePhysicalPath = filenameStandard.FilePhysicalFullAdress,
                    FileWebRootFullPath = filenameStandard.FileWebRootFullAdress
                });
                newUploadingFileList.Remove(filenameStandard);
            }

            SetUploadingFilesList(newUploadingFileList);
        }


        public T UpdateAttachment<T>(T originalAttachment, DbContext db = null,
            string AttachmentsIDs_FieldName = "attachmentsIDsList") where T : Attachment, new()
        {

            List<Attachment<Project>> list = new List<Attachment<Project>>();
            if (originalAttachment != null && !string.IsNullOrEmpty(originalAttachment.FilePhysicalName))
                list.Add(new Attachment<Project>()
                {
                    FilePhysicalName = originalAttachment.FilePhysicalName,
                    FileVirtualName = originalAttachment.FileVirtualName,
                    FilePhysicalPath = originalAttachment.FilePhysicalPath,
                    FileWebRootFullPath = originalAttachment.FileWebRootFullPath
                });

            UpdateAttachmentsList<Project>(list, AttachmentsIDs_FieldName);
            if (originalAttachment != null && db != null && !string.IsNullOrEmpty(originalAttachment.FilePhysicalName))
                db.Remove(originalAttachment); 
            if (list == null || list.Count == 0 || string.IsNullOrEmpty(list.LastOrDefault().FilePhysicalName))
                return null;
            
            var newAttachment = new T();
            newAttachment.FilePhysicalName = list.LastOrDefault().FilePhysicalName;
            newAttachment.FileVirtualName = list.LastOrDefault().FileVirtualName;
            newAttachment.FilePhysicalPath = list.LastOrDefault().FilePhysicalPath;
            newAttachment.FileWebRootFullPath = list.LastOrDefault().FileWebRootFullPath;
            newAttachment.ID = list.LastOrDefault().ID;

            return newAttachment;
        }


        public List<SearchKeyword> GetSearchKeywordsFromCache()
        {
            string fromCache;
            if (!memoryCache.TryGetValue("KeywordsList", out fromCache))
                return null;

            List<SearchKeyword> keywords = new List<SearchKeyword>();
            keywords = JsonConvert.DeserializeObject<List<SearchKeyword>>(fromCache);
            
            return keywords ?? new List<SearchKeyword>();
        }

        public void PushSearchKeywordsToCache(List<SearchKeyword> keywords)
        {

            MemoryCacheEntryOptions cacheEntryOptions = new MemoryCacheEntryOptions()
                .SetSlidingExpiration(TimeSpan.FromDays(90));
            memoryCache.Set("KeywordsList", JsonConvert.SerializeObject(keywords), cacheEntryOptions);
            //memoryCache.Remove("KeywordsList");
        }
    }




}