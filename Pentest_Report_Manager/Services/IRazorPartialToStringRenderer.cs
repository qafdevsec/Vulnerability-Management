using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.IO;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Abstractions;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.AspNetCore.Mvc.Razor;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Mvc.ViewEngines;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using Microsoft.AspNetCore.Routing;


namespace Pentest_Report_Manager.Services
{
    public interface IRazorPartialToStringRenderer
    {
        Task<string> RenderPartialToStringAsync<TModel>(string partialName, TModel model);
    }


    /*
        var body = await _renderer.RenderPartialToStringAsync("_ContactEmailPartial", ContactForm);
        await _emailer.SendAsync(ContactForm.Name, ContactForm.Email, ContactForm.Subject, body);
        PostResult = "Check your specified pickup directory";
    */

    public class RazorPartialToStringRenderer : IRazorPartialToStringRenderer
    {
        private IRazorViewEngine _viewEngine;
        private ITempDataProvider _tempDataProvider;
        private IServiceProvider _serviceProvider;
        public RazorPartialToStringRenderer(
            IRazorViewEngine viewEngine,
            ITempDataProvider tempDataProvider,
            IServiceProvider serviceProvider)
        {
            _viewEngine = viewEngine;
            _tempDataProvider = tempDataProvider;
            _serviceProvider = serviceProvider;
        }



        public async Task<string> RenderPartialToStringAsync<TModel>(string partialName, TModel model)
        {
            var newHttpContext = new DefaultHttpContext {RequestServices = _serviceProvider};
            var actionContext = new ActionContext(newHttpContext, 
                new RouteData(), new ActionDescriptor());

            var partial = FindView(actionContext, partialName);
            using (var output = new StringWriter())
            {
                var viewContext = new ViewContext(
                    actionContext,
                    partial,
                    new ViewDataDictionary<TModel>(
                        metadataProvider: new EmptyModelMetadataProvider(),
                        modelState: new ModelStateDictionary())
                    {
                        Model = model
                    },
                    new TempDataDictionary(
                        actionContext.HttpContext,
                        _tempDataProvider),
                    output,
                    new HtmlHelperOptions()
                );
                await partial.RenderAsync(viewContext);
                return output.ToString();
            }
        }


        private IView FindView(ActionContext actionContext, string partialName)
        {
            //if (viewNamePath.EndsWith(".cshtml"))
            //    viewResult = viewEngine.GetView(viewNamePath, viewNamePath, false);
            //else
            //    viewResult = viewEngine.FindView(controller.ControllerContext,
            //        viewNamePath, false);
            var getPartialResult = _viewEngine.GetView(null, partialName, false);
            if (getPartialResult.Success)
            {
                return getPartialResult.View;
            }
            var findPartialResult = _viewEngine.FindView(actionContext, partialName, false);
            if (findPartialResult.Success)
            {
                return findPartialResult.View;
            }
            var searchedLocations = getPartialResult.SearchedLocations.Concat(findPartialResult.SearchedLocations);
            var errorMessage = string.Join(
                Environment.NewLine,
                new[] { $"Unable to find partial '{partialName}'. The following locations were searched:" }.Concat(searchedLocations)); ;
            throw new InvalidOperationException(errorMessage);
        }




    }






    public class RazorPartialToStringRenderer2 : IRazorPartialToStringRenderer
    {
        private IRazorViewEngine _viewEngine;
        private ITempDataProvider _tempDataProvider;
        private IServiceProvider _serviceProvider;
        public RazorPartialToStringRenderer2(
            IRazorViewEngine viewEngine,
            ITempDataProvider tempDataProvider,
            IServiceProvider serviceProvider)
        {
            _viewEngine = viewEngine;
            _tempDataProvider = tempDataProvider;
            _serviceProvider = serviceProvider;
        }



        public async Task<string> RenderPartialToStringAsync<TModel>(string partialName, TModel model)
        {
            var newHttpContext = new DefaultHttpContext { RequestServices = _serviceProvider };
            var actionContext = new ActionContext(newHttpContext,
                new RouteData(), new ActionDescriptor());

            ViewEngineResult viewResult = null;
            viewResult = _viewEngine.GetView(null, partialName, false);
            if (!viewResult.Success)
                return $"A view with the name '{partialName}' could not be found";

            using (var output = new StringWriter())
            {
                try
                {
                    var viewContext = new ViewContext(
                        actionContext,
                        viewResult.View,
                        new ViewDataDictionary<TModel>(
                            metadataProvider: new EmptyModelMetadataProvider(),
                            modelState: new ModelStateDictionary())
                        {
                            Model = model
                        },
                        new TempDataDictionary(
                            actionContext.HttpContext,
                            _tempDataProvider),
                        output,
                        new HtmlHelperOptions()
                    );

                    await viewResult.View.RenderAsync(viewContext);
                    return output.GetStringBuilder().ToString();
                }
                catch (Exception exc)
                {
                    return $"Failed - {exc.Message}";
                }
            }

        }


    }

}
