using Microsoft.AspNetCore.Http.Extensions;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.AspNetCore.Routing;
using Microsoft.AspNetCore.WebUtilities;
using Pentest_Report_Manager.Classes;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace Pentest_Report_Manager.Services.Filters
{
    public class FormID_isRequired : IActionFilter
    {
        public void OnActionExecuted(ActionExecutedContext context)
        {
            
        }



        public void OnActionExecuting(ActionExecutingContext context)
        {
            string FormId, Mac;
            Guid _formId;
            bool isGet = context.HttpContext.Request.Method.ToUpper() == "GET";


            FormId = context.HttpContext.Request.Query["FormId"];
            if (string.IsNullOrEmpty(FormId) && !isGet)
                try
                {
                    FormId = context.HttpContext.Request.Form != null ? context.HttpContext.Request.Form["FormId"].ToString() : "";
                }
                catch (Exception) { }
            FormId = FormId ?? "";

            Mac = context.HttpContext.Request.Query["Mac"];
            if (string.IsNullOrEmpty(Mac) && !isGet)
                try
                {
                    Mac = context.HttpContext.Request.Form != null ? context.HttpContext.Request.Form["Mac"].ToString() : "";
                }
                catch (Exception) { }
            Mac = Mac ?? "";



            if (!Guid.TryParse(FormId, out _formId) || MyUtilities.GetHMac(FormId, 20) != Mac)
            {
                if (isGet)
                {
                    var newGuid = Guid.NewGuid().ToString();

                    var queries = context.HttpContext.Request.Query
                    .Where(q => q.Key != "FormId" && q.Key != "Mac")
                    .Select(x => new KeyValuePair<string, string>(x.Key, x.Value)).ToList();
                    var qb = new QueryBuilder(queries);
                    qb.Add("FormId", newGuid);
                    qb.Add("Mac", MyUtilities.GetHMac(newGuid, 20));

                    string newUrl = context.HttpContext.Request.Path + qb.ToQueryString();
                    context.Result = new RedirectResult(newUrl);
                }
                else //Post
                {
                    context.Result = new BadRequestResult();
                }
            }
            
            

            //if (FormId.Length>0 && FormId.Substring(0, 1) == ",")
            //    FormId = FormId.Substring(1, FormId.Length - 1);
            //if (Mac.Length > 0 && Mac.Substring(0, 1) == ",")
            //    Mac = Mac.Substring(1, Mac.Length - 1);

            
        }

    }
}